
HAL_KEYPAD_LCD_Ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000258c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002768  08002768  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002768  08002768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002770  08002770  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002784  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002784  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083df  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015dc  00000000  00000000  0002841b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  000299f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000720  00000000  00000000  0002a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000204f3  00000000  00000000  0002a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075ae  00000000  00000000  0004add3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3e12  00000000  00000000  00052381  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116193  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee8  00000000  00000000  00116210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002738 	.word	0x08002738

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002738 	.word	0x08002738

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af02      	add	r7, sp, #8
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	f023 030f 	bic.w	r3, r3, #15
 8000514:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f043 030c 	orr.w	r3, r3, #12
 8000522:	b2db      	uxtb	r3, r3
 8000524:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	b2db      	uxtb	r3, r3
 800052e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	f043 030c 	orr.w	r3, r3, #12
 8000536:	b2db      	uxtb	r3, r3
 8000538:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	b2db      	uxtb	r3, r3
 8000542:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000544:	f107 0208 	add.w	r2, r7, #8
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2304      	movs	r3, #4
 800054e:	214e      	movs	r1, #78	; 0x4e
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0x5c>)
 8000552:	f001 f86d 	bl	8001630 <HAL_I2C_Master_Transmit>
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	2000002c 	.word	0x2000002c

08000564 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f023 030f 	bic.w	r3, r3, #15
 8000574:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	f043 030d 	orr.w	r3, r3, #13
 8000582:	b2db      	uxtb	r3, r3
 8000584:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	f043 0309 	orr.w	r3, r3, #9
 800058c:	b2db      	uxtb	r3, r3
 800058e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	f043 030d 	orr.w	r3, r3, #13
 8000596:	b2db      	uxtb	r3, r3
 8000598:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	f043 0309 	orr.w	r3, r3, #9
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a4:	f107 0208 	add.w	r2, r7, #8
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2304      	movs	r3, #4
 80005ae:	214e      	movs	r1, #78	; 0x4e
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <lcd_send_data+0x5c>)
 80005b2:	f001 f83d 	bl	8001630 <HAL_I2C_Master_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f000 fc2d 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005ce:	2030      	movs	r0, #48	; 0x30
 80005d0:	f7ff ff98 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005d4:	2005      	movs	r0, #5
 80005d6:	f000 fc27 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f7ff ff92 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 fc21 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e6:	2030      	movs	r0, #48	; 0x30
 80005e8:	f7ff ff8c 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(10);
 80005ec:	200a      	movs	r0, #10
 80005ee:	f000 fc1b 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005f2:	2020      	movs	r0, #32
 80005f4:	f7ff ff86 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(10);
 80005f8:	200a      	movs	r0, #10
 80005fa:	f000 fc15 	bl	8000e28 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80005fe:	2028      	movs	r0, #40	; 0x28
 8000600:	f7ff ff80 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fc0f 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800060a:	2008      	movs	r0, #8
 800060c:	f7ff ff7a 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fc09 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000616:	2001      	movs	r0, #1
 8000618:	f7ff ff74 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fc03 	bl	8000e28 <HAL_Delay>
	HAL_Delay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fc00 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000628:	2006      	movs	r0, #6
 800062a:	f7ff ff6b 	bl	8000504 <lcd_send_cmd>
	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fbfa 	bl	8000e28 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000634:	200c      	movs	r0, #12
 8000636:	f7ff ff65 	bl	8000504 <lcd_send_cmd>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <Read_Key>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char Read_Key()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	counter = 0;
 8000644:	4bb9      	ldr	r3, [pc, #740]	; (800092c <Read_Key+0x2ec>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	if (counter ==0){
 800064a:	4bb8      	ldr	r3, [pc, #736]	; (800092c <Read_Key+0x2ec>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d157      	bne.n	8000702 <Read_Key+0xc2>
		HAL_GPIO_WritePin(GPIOA, Column4_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	48b6      	ldr	r0, [pc, #728]	; (8000930 <Read_Key+0x2f0>)
 8000658:	f000 fe98 	bl	800138c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Column1_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	48b3      	ldr	r0, [pc, #716]	; (8000930 <Read_Key+0x2f0>)
 8000662:	f000 fe93 	bl	800138c <HAL_GPIO_WritePin>

		if(HAL_GPIO_ReadPin(GPIOA, Row1_Pin)){
 8000666:	2101      	movs	r1, #1
 8000668:	48b1      	ldr	r0, [pc, #708]	; (8000930 <Read_Key+0x2f0>)
 800066a:	f000 fe77 	bl	800135c <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d009      	beq.n	8000688 <Read_Key+0x48>
			while(HAL_GPIO_ReadPin(GPIOA, Row1_Pin));
 8000674:	bf00      	nop
 8000676:	2101      	movs	r1, #1
 8000678:	48ad      	ldr	r0, [pc, #692]	; (8000930 <Read_Key+0x2f0>)
 800067a:	f000 fe6f 	bl	800135c <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f8      	bne.n	8000676 <Read_Key+0x36>
			return '1';
 8000684:	2331      	movs	r3, #49	; 0x31
 8000686:	e14e      	b.n	8000926 <Read_Key+0x2e6>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, Row2_Pin)){
 8000688:	2102      	movs	r1, #2
 800068a:	48a9      	ldr	r0, [pc, #676]	; (8000930 <Read_Key+0x2f0>)
 800068c:	f000 fe66 	bl	800135c <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d009      	beq.n	80006aa <Read_Key+0x6a>
			while (HAL_GPIO_ReadPin(GPIOA, Row2_Pin));
 8000696:	bf00      	nop
 8000698:	2102      	movs	r1, #2
 800069a:	48a5      	ldr	r0, [pc, #660]	; (8000930 <Read_Key+0x2f0>)
 800069c:	f000 fe5e 	bl	800135c <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f8      	bne.n	8000698 <Read_Key+0x58>
			return '2';
 80006a6:	2332      	movs	r3, #50	; 0x32
 80006a8:	e13d      	b.n	8000926 <Read_Key+0x2e6>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, Row3_Pin)) {
 80006aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ae:	48a0      	ldr	r0, [pc, #640]	; (8000930 <Read_Key+0x2f0>)
 80006b0:	f000 fe54 	bl	800135c <HAL_GPIO_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d00a      	beq.n	80006d0 <Read_Key+0x90>
			while (HAL_GPIO_ReadPin(GPIOA, Row3_Pin));
 80006ba:	bf00      	nop
 80006bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c0:	489b      	ldr	r0, [pc, #620]	; (8000930 <Read_Key+0x2f0>)
 80006c2:	f000 fe4b 	bl	800135c <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1f7      	bne.n	80006bc <Read_Key+0x7c>
			return '3';
 80006cc:	2333      	movs	r3, #51	; 0x33
 80006ce:	e12a      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row4_Pin)) {
 80006d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d4:	4896      	ldr	r0, [pc, #600]	; (8000930 <Read_Key+0x2f0>)
 80006d6:	f000 fe41 	bl	800135c <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00a      	beq.n	80006f6 <Read_Key+0xb6>
			while (HAL_GPIO_ReadPin(GPIOA, Row4_Pin));
 80006e0:	bf00      	nop
 80006e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e6:	4892      	ldr	r0, [pc, #584]	; (8000930 <Read_Key+0x2f0>)
 80006e8:	f000 fe38 	bl	800135c <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f7      	bne.n	80006e2 <Read_Key+0xa2>
			return 'A';
 80006f2:	2341      	movs	r3, #65	; 0x41
 80006f4:	e117      	b.n	8000926 <Read_Key+0x2e6>
		}
		else
			counter++;
 80006f6:	4b8d      	ldr	r3, [pc, #564]	; (800092c <Read_Key+0x2ec>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b8b      	ldr	r3, [pc, #556]	; (800092c <Read_Key+0x2ec>)
 8000700:	701a      	strb	r2, [r3, #0]
	}
	 if (counter == 1) {
 8000702:	4b8a      	ldr	r3, [pc, #552]	; (800092c <Read_Key+0x2ec>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d157      	bne.n	80007ba <Read_Key+0x17a>
		HAL_GPIO_WritePin(GPIOA, Column1_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2110      	movs	r1, #16
 800070e:	4888      	ldr	r0, [pc, #544]	; (8000930 <Read_Key+0x2f0>)
 8000710:	f000 fe3c 	bl	800138c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Column2_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2120      	movs	r1, #32
 8000718:	4885      	ldr	r0, [pc, #532]	; (8000930 <Read_Key+0x2f0>)
 800071a:	f000 fe37 	bl	800138c <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOA, Row1_Pin)) {
 800071e:	2101      	movs	r1, #1
 8000720:	4883      	ldr	r0, [pc, #524]	; (8000930 <Read_Key+0x2f0>)
 8000722:	f000 fe1b 	bl	800135c <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d009      	beq.n	8000740 <Read_Key+0x100>
			while (HAL_GPIO_ReadPin(GPIOA, Row1_Pin));
 800072c:	bf00      	nop
 800072e:	2101      	movs	r1, #1
 8000730:	487f      	ldr	r0, [pc, #508]	; (8000930 <Read_Key+0x2f0>)
 8000732:	f000 fe13 	bl	800135c <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f8      	bne.n	800072e <Read_Key+0xee>
			return '4';
 800073c:	2334      	movs	r3, #52	; 0x34
 800073e:	e0f2      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row2_Pin)) {
 8000740:	2102      	movs	r1, #2
 8000742:	487b      	ldr	r0, [pc, #492]	; (8000930 <Read_Key+0x2f0>)
 8000744:	f000 fe0a 	bl	800135c <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d009      	beq.n	8000762 <Read_Key+0x122>
			while (HAL_GPIO_ReadPin(GPIOA, Row2_Pin));
 800074e:	bf00      	nop
 8000750:	2102      	movs	r1, #2
 8000752:	4877      	ldr	r0, [pc, #476]	; (8000930 <Read_Key+0x2f0>)
 8000754:	f000 fe02 	bl	800135c <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f8      	bne.n	8000750 <Read_Key+0x110>
			return '5';
 800075e:	2335      	movs	r3, #53	; 0x35
 8000760:	e0e1      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row3_Pin)) {
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	4872      	ldr	r0, [pc, #456]	; (8000930 <Read_Key+0x2f0>)
 8000768:	f000 fdf8 	bl	800135c <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00a      	beq.n	8000788 <Read_Key+0x148>
			while (HAL_GPIO_ReadPin(GPIOA, Row3_Pin));
 8000772:	bf00      	nop
 8000774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000778:	486d      	ldr	r0, [pc, #436]	; (8000930 <Read_Key+0x2f0>)
 800077a:	f000 fdef 	bl	800135c <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1f7      	bne.n	8000774 <Read_Key+0x134>
			return '6';
 8000784:	2336      	movs	r3, #54	; 0x36
 8000786:	e0ce      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row4_Pin)) {
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	4868      	ldr	r0, [pc, #416]	; (8000930 <Read_Key+0x2f0>)
 800078e:	f000 fde5 	bl	800135c <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00a      	beq.n	80007ae <Read_Key+0x16e>
			while (HAL_GPIO_ReadPin(GPIOA, Row4_Pin));
 8000798:	bf00      	nop
 800079a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079e:	4864      	ldr	r0, [pc, #400]	; (8000930 <Read_Key+0x2f0>)
 80007a0:	f000 fddc 	bl	800135c <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f7      	bne.n	800079a <Read_Key+0x15a>
			return 'B';
 80007aa:	2342      	movs	r3, #66	; 0x42
 80007ac:	e0bb      	b.n	8000926 <Read_Key+0x2e6>
		} else
			counter++;
 80007ae:	4b5f      	ldr	r3, [pc, #380]	; (800092c <Read_Key+0x2ec>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b5d      	ldr	r3, [pc, #372]	; (800092c <Read_Key+0x2ec>)
 80007b8:	701a      	strb	r2, [r3, #0]
	}
	 if (counter == 2) {
 80007ba:	4b5c      	ldr	r3, [pc, #368]	; (800092c <Read_Key+0x2ec>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d157      	bne.n	8000872 <Read_Key+0x232>
		HAL_GPIO_WritePin(GPIOA, Column2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	485a      	ldr	r0, [pc, #360]	; (8000930 <Read_Key+0x2f0>)
 80007c8:	f000 fde0 	bl	800138c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Column3_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	4857      	ldr	r0, [pc, #348]	; (8000930 <Read_Key+0x2f0>)
 80007d2:	f000 fddb 	bl	800138c <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOA, Row1_Pin)) {
 80007d6:	2101      	movs	r1, #1
 80007d8:	4855      	ldr	r0, [pc, #340]	; (8000930 <Read_Key+0x2f0>)
 80007da:	f000 fdbf 	bl	800135c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d009      	beq.n	80007f8 <Read_Key+0x1b8>
			while (HAL_GPIO_ReadPin(GPIOA, Row1_Pin));
 80007e4:	bf00      	nop
 80007e6:	2101      	movs	r1, #1
 80007e8:	4851      	ldr	r0, [pc, #324]	; (8000930 <Read_Key+0x2f0>)
 80007ea:	f000 fdb7 	bl	800135c <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f8      	bne.n	80007e6 <Read_Key+0x1a6>
			return '7';
 80007f4:	2337      	movs	r3, #55	; 0x37
 80007f6:	e096      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row2_Pin)) {
 80007f8:	2102      	movs	r1, #2
 80007fa:	484d      	ldr	r0, [pc, #308]	; (8000930 <Read_Key+0x2f0>)
 80007fc:	f000 fdae 	bl	800135c <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d009      	beq.n	800081a <Read_Key+0x1da>
			while (HAL_GPIO_ReadPin(GPIOA, Row2_Pin));
 8000806:	bf00      	nop
 8000808:	2102      	movs	r1, #2
 800080a:	4849      	ldr	r0, [pc, #292]	; (8000930 <Read_Key+0x2f0>)
 800080c:	f000 fda6 	bl	800135c <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f8      	bne.n	8000808 <Read_Key+0x1c8>
			return '8';
 8000816:	2338      	movs	r3, #56	; 0x38
 8000818:	e085      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row3_Pin)) {
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	4844      	ldr	r0, [pc, #272]	; (8000930 <Read_Key+0x2f0>)
 8000820:	f000 fd9c 	bl	800135c <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00a      	beq.n	8000840 <Read_Key+0x200>
			while (HAL_GPIO_ReadPin(GPIOA, Row3_Pin));
 800082a:	bf00      	nop
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	483f      	ldr	r0, [pc, #252]	; (8000930 <Read_Key+0x2f0>)
 8000832:	f000 fd93 	bl	800135c <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f7      	bne.n	800082c <Read_Key+0x1ec>
			return '9';
 800083c:	2339      	movs	r3, #57	; 0x39
 800083e:	e072      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row4_Pin)) {
 8000840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <Read_Key+0x2f0>)
 8000846:	f000 fd89 	bl	800135c <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <Read_Key+0x226>
			while (HAL_GPIO_ReadPin(GPIOA, Row4_Pin));
 8000850:	bf00      	nop
 8000852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000856:	4836      	ldr	r0, [pc, #216]	; (8000930 <Read_Key+0x2f0>)
 8000858:	f000 fd80 	bl	800135c <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f7      	bne.n	8000852 <Read_Key+0x212>
			return 'C';
 8000862:	2343      	movs	r3, #67	; 0x43
 8000864:	e05f      	b.n	8000926 <Read_Key+0x2e6>
		} else
			counter++;
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <Read_Key+0x2ec>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <Read_Key+0x2ec>)
 8000870:	701a      	strb	r2, [r3, #0]
	}
	 if (counter == 3) {
 8000872:	4b2e      	ldr	r3, [pc, #184]	; (800092c <Read_Key+0x2ec>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b03      	cmp	r3, #3
 8000878:	d154      	bne.n	8000924 <Read_Key+0x2e4>
		HAL_GPIO_WritePin(GPIOA, Column3_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	482c      	ldr	r0, [pc, #176]	; (8000930 <Read_Key+0x2f0>)
 8000880:	f000 fd84 	bl	800138c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Column4_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4829      	ldr	r0, [pc, #164]	; (8000930 <Read_Key+0x2f0>)
 800088a:	f000 fd7f 	bl	800138c <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOA, Row1_Pin)) {
 800088e:	2101      	movs	r1, #1
 8000890:	4827      	ldr	r0, [pc, #156]	; (8000930 <Read_Key+0x2f0>)
 8000892:	f000 fd63 	bl	800135c <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d009      	beq.n	80008b0 <Read_Key+0x270>
			while (HAL_GPIO_ReadPin(GPIOA, Row1_Pin));
 800089c:	bf00      	nop
 800089e:	2101      	movs	r1, #1
 80008a0:	4823      	ldr	r0, [pc, #140]	; (8000930 <Read_Key+0x2f0>)
 80008a2:	f000 fd5b 	bl	800135c <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f8      	bne.n	800089e <Read_Key+0x25e>
			return '*';
 80008ac:	232a      	movs	r3, #42	; 0x2a
 80008ae:	e03a      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row2_Pin)) {
 80008b0:	2102      	movs	r1, #2
 80008b2:	481f      	ldr	r0, [pc, #124]	; (8000930 <Read_Key+0x2f0>)
 80008b4:	f000 fd52 	bl	800135c <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d009      	beq.n	80008d2 <Read_Key+0x292>
			while (HAL_GPIO_ReadPin(GPIOA, Row2_Pin));
 80008be:	bf00      	nop
 80008c0:	2102      	movs	r1, #2
 80008c2:	481b      	ldr	r0, [pc, #108]	; (8000930 <Read_Key+0x2f0>)
 80008c4:	f000 fd4a 	bl	800135c <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f8      	bne.n	80008c0 <Read_Key+0x280>
			return '0';
 80008ce:	2330      	movs	r3, #48	; 0x30
 80008d0:	e029      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row3_Pin)) {
 80008d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <Read_Key+0x2f0>)
 80008d8:	f000 fd40 	bl	800135c <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00a      	beq.n	80008f8 <Read_Key+0x2b8>
			while (HAL_GPIO_ReadPin(GPIOA, Row3_Pin));
 80008e2:	bf00      	nop
 80008e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <Read_Key+0x2f0>)
 80008ea:	f000 fd37 	bl	800135c <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f7      	bne.n	80008e4 <Read_Key+0x2a4>
			return '#';
 80008f4:	2323      	movs	r3, #35	; 0x23
 80008f6:	e016      	b.n	8000926 <Read_Key+0x2e6>
		} else if (HAL_GPIO_ReadPin(GPIOA, Row4_Pin)) {
 80008f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <Read_Key+0x2f0>)
 80008fe:	f000 fd2d 	bl	800135c <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00a      	beq.n	800091e <Read_Key+0x2de>
			while (HAL_GPIO_ReadPin(GPIOA, Row4_Pin));
 8000908:	bf00      	nop
 800090a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090e:	4808      	ldr	r0, [pc, #32]	; (8000930 <Read_Key+0x2f0>)
 8000910:	f000 fd24 	bl	800135c <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f7      	bne.n	800090a <Read_Key+0x2ca>
			return 'D';
 800091a:	2344      	movs	r3, #68	; 0x44
 800091c:	e003      	b.n	8000926 <Read_Key+0x2e6>
		} else
			counter=0;
 800091e:	4b03      	ldr	r3, [pc, #12]	; (800092c <Read_Key+0x2ec>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
	}
	 return 0;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000028 	.word	0x20000028
 8000930:	40020000 	.word	0x40020000

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 fa04 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f81e 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f000 f8bc 	bl	8000abc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000944:	f000 f88c 	bl	8000a60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000948:	f7ff fe3c 	bl	80005c4 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_send_cmd(0x1);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fdd9 	bl	8000504 <lcd_send_cmd>
	  key=Read_Key();
 8000952:	f7ff fe75 	bl	8000640 <Read_Key>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <main+0x44>)
 800095c:	701a      	strb	r2, [r3, #0]
	  if(key!=0)
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <main+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d004      	beq.n	8000970 <main+0x3c>
		  lcd_send_data(key);
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <main+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fdfa 	bl	8000564 <lcd_send_data>
	  HAL_Delay(100);
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f000 fa59 	bl	8000e28 <HAL_Delay>
	  lcd_send_cmd(0x1);
 8000976:	e7e9      	b.n	800094c <main+0x18>
 8000978:	20000080 	.word	0x20000080

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2234      	movs	r2, #52	; 0x34
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fecc 	bl	8002728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <SystemClock_Config+0xdc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <SystemClock_Config+0xdc>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <SystemClock_Config+0xdc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <SystemClock_Config+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a25      	ldr	r2, [pc, #148]	; (8000a5c <SystemClock_Config+0xe0>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <SystemClock_Config+0xe0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009f0:	23b4      	movs	r3, #180	; 0xb4
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fc11 	bl	800222c <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a10:	f000 f8b2 	bl	8000b78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a14:	f001 f914 	bl	8001c40 <HAL_PWREx_EnableOverDrive>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a1e:	f000 f8ab 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2105      	movs	r1, #5
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f94d 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a4c:	f000 f894 	bl	8000b78 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f000 fc8f 	bl	80013c0 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f866 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000002c 	.word	0x2000002c
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_GPIO_Init+0xb4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	21f0      	movs	r1, #240	; 0xf0
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000b2c:	f000 fc2e 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Row1_Pin Row2_Pin Row3_Pin Row4_Pin */
  GPIO_InitStruct.Pin = Row1_Pin|Row2_Pin|Row3_Pin|Row4_Pin;
 8000b30:	f240 3303 	movw	r3, #771	; 0x303
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000b46:	f000 fa77 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Column1_Pin Column2_Pin Column3_Pin Column4_Pin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 8000b4a:	23f0      	movs	r3, #240	; 0xf0
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_GPIO_Init+0xb8>)
 8000b62:	f000 fa69 	bl	8001038 <HAL_GPIO_Init>

}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_I2C_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12c      	bne.n	8000c54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <HAL_I2C_MspInit+0x8c>)
 8000c34:	f000 fa00 	bl	8001038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f894 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <SystemInit+0x28>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <SystemInit+0x28>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SystemInit+0x28>)
 8000cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cde:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cf6:	e003      	b.n	8000d00 <LoopCopyDataInit>

08000cf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cfe:	3104      	adds	r1, #4

08000d00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d08:	d3f6      	bcc.n	8000cf8 <CopyDataInit>
  ldr  r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d0c:	e002      	b.n	8000d14 <LoopFillZerobss>

08000d0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d10:	f842 3b04 	str.w	r3, [r2], #4

08000d14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d18:	d3f9      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd3 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f001 fcdf 	bl	80026e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fe07 	bl	8000934 <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d2c:	08002778 	.word	0x08002778
  ldr  r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d38:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d3c:	20000088 	.word	0x20000088

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f92f 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff ff06 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f939 	bl	800101e <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f90f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000084 	.word	0x20000084

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000084 	.word	0x20000084

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_Delay+0x40>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff47 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff5c 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffb0 	bl	8000f8c <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e165      	b.n	8001320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	429a      	cmp	r2, r3
 800106e:	f040 8154 	bne.w	800131a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d00b      	beq.n	8001092 <HAL_GPIO_Init+0x5a>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001086:	2b11      	cmp	r3, #17
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b12      	cmp	r3, #18
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0xfc>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b12      	cmp	r3, #18
 8001132:	d123      	bne.n	800117c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	69b9      	ldr	r1, [r7, #24]
 8001178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0203 	and.w	r2, r3, #3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 80ae 	beq.w	800131a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <HAL_GPIO_Init+0x2fc>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a5b      	ldr	r2, [pc, #364]	; (8001334 <HAL_GPIO_Init+0x2fc>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b59      	ldr	r3, [pc, #356]	; (8001334 <HAL_GPIO_Init+0x2fc>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011da:	4a57      	ldr	r2, [pc, #348]	; (8001338 <HAL_GPIO_Init+0x300>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x304>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x308>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x216>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x30c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x212>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4b      	ldr	r2, [pc, #300]	; (8001348 <HAL_GPIO_Init+0x310>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x20e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4a      	ldr	r2, [pc, #296]	; (800134c <HAL_GPIO_Init+0x314>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x20a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a49      	ldr	r2, [pc, #292]	; (8001350 <HAL_GPIO_Init+0x318>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x206>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a48      	ldr	r2, [pc, #288]	; (8001354 <HAL_GPIO_Init+0x31c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x202>
 8001236:	2306      	movs	r3, #6
 8001238:	e00c      	b.n	8001254 <HAL_GPIO_Init+0x21c>
 800123a:	2307      	movs	r3, #7
 800123c:	e00a      	b.n	8001254 <HAL_GPIO_Init+0x21c>
 800123e:	2305      	movs	r3, #5
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x21c>
 8001242:	2304      	movs	r3, #4
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x21c>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x21c>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x21c>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x21c>
 8001252:	2300      	movs	r3, #0
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001264:	4934      	ldr	r1, [pc, #208]	; (8001338 <HAL_GPIO_Init+0x300>)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_GPIO_Init+0x320>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001296:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_GPIO_Init+0x320>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_GPIO_Init+0x320>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <HAL_GPIO_Init+0x320>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_GPIO_Init+0x320>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <HAL_GPIO_Init+0x320>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_GPIO_Init+0x320>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_GPIO_Init+0x320>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	f67f ae96 	bls.w	8001054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001328:	bf00      	nop
 800132a:	3724      	adds	r7, #36	; 0x24
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40021400 	.word	0x40021400
 8001354:	40021800 	.word	0x40021800
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e001      	b.n	800137e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e11f      	b.n	8001612 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fbf6 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001424:	f000 fd4e 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8001428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a7b      	ldr	r2, [pc, #492]	; (800161c <HAL_I2C_Init+0x25c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d807      	bhi.n	8001444 <HAL_I2C_Init+0x84>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a7a      	ldr	r2, [pc, #488]	; (8001620 <HAL_I2C_Init+0x260>)
 8001438:	4293      	cmp	r3, r2
 800143a:	bf94      	ite	ls
 800143c:	2301      	movls	r3, #1
 800143e:	2300      	movhi	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	e006      	b.n	8001452 <HAL_I2C_Init+0x92>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a77      	ldr	r2, [pc, #476]	; (8001624 <HAL_I2C_Init+0x264>)
 8001448:	4293      	cmp	r3, r2
 800144a:	bf94      	ite	ls
 800144c:	2301      	movls	r3, #1
 800144e:	2300      	movhi	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0db      	b.n	8001612 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4a72      	ldr	r2, [pc, #456]	; (8001628 <HAL_I2C_Init+0x268>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9b      	lsrs	r3, r3, #18
 8001464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a64      	ldr	r2, [pc, #400]	; (800161c <HAL_I2C_Init+0x25c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d802      	bhi.n	8001494 <HAL_I2C_Init+0xd4>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	3301      	adds	r3, #1
 8001492:	e009      	b.n	80014a8 <HAL_I2C_Init+0xe8>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_I2C_Init+0x26c>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	099b      	lsrs	r3, r3, #6
 80014a6:	3301      	adds	r3, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	430b      	orrs	r3, r1
 80014ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4956      	ldr	r1, [pc, #344]	; (800161c <HAL_I2C_Init+0x25c>)
 80014c4:	428b      	cmp	r3, r1
 80014c6:	d80d      	bhi.n	80014e4 <HAL_I2C_Init+0x124>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e59      	subs	r1, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b04      	cmp	r3, #4
 80014de:	bf38      	it	cc
 80014e0:	2304      	movcc	r3, #4
 80014e2:	e04f      	b.n	8001584 <HAL_I2C_Init+0x1c4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_I2C_Init+0x150>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e012      	b.n	8001536 <HAL_I2C_Init+0x176>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	0099      	lsls	r1, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x17e>
 800153a:	2301      	movs	r3, #1
 800153c:	e022      	b.n	8001584 <HAL_I2C_Init+0x1c4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10e      	bne.n	8001564 <HAL_I2C_Init+0x1a4>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e58      	subs	r0, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	fbb0 f3f3 	udiv	r3, r0, r3
 8001558:	3301      	adds	r3, #1
 800155a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001562:	e00f      	b.n	8001584 <HAL_I2C_Init+0x1c4>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	0099      	lsls	r1, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6911      	ldr	r1, [r2, #16]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68d2      	ldr	r2, [r2, #12]
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	000186a0 	.word	0x000186a0
 8001620:	001e847f 	.word	0x001e847f
 8001624:	003d08ff 	.word	0x003d08ff
 8001628:	431bde83 	.word	0x431bde83
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	817b      	strh	r3, [r7, #10]
 8001640:	4613      	mov	r3, r2
 8001642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fbe4 	bl	8000e10 <HAL_GetTick>
 8001648:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b20      	cmp	r3, #32
 8001654:	f040 80e0 	bne.w	8001818 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2319      	movs	r3, #25
 800165e:	2201      	movs	r2, #1
 8001660:	4970      	ldr	r1, [pc, #448]	; (8001824 <HAL_I2C_Master_Transmit+0x1f4>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f964 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	e0d3      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_I2C_Master_Transmit+0x50>
 800167c:	2302      	movs	r3, #2
 800167e:	e0cc      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d007      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2221      	movs	r2, #33	; 0x21
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2210      	movs	r2, #16
 80016c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	893a      	ldrh	r2, [r7, #8]
 80016d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a50      	ldr	r2, [pc, #320]	; (8001828 <HAL_I2C_Master_Transmit+0x1f8>)
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6a3a      	ldr	r2, [r7, #32]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f89c 	bl	800182c <I2C_MasterRequestWrite>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e08d      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001714:	e066      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f9de 	bl	8001adc <I2C_WaitOnTXEFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00d      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2b04      	cmp	r3, #4
 800172c:	d107      	bne.n	800173e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b04      	cmp	r3, #4
 800177e:	d11b      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d017      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6a39      	ldr	r1, [r7, #32]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 f9ce 	bl	8001b5e <I2C_WaitOnBTFFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d194      	bne.n	8001716 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	00100002 	.word	0x00100002
 8001828:	ffff0000 	.word	0xffff0000

0800182c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d006      	beq.n	8001856 <I2C_MasterRequestWrite+0x2a>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d003      	beq.n	8001856 <I2C_MasterRequestWrite+0x2a>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001854:	d108      	bne.n	8001868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e00b      	b.n	8001880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	2b12      	cmp	r3, #18
 800186e:	d107      	bne.n	8001880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800187e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f84f 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e035      	b.n	800191e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ba:	d108      	bne.n	80018ce <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018bc:	897b      	ldrh	r3, [r7, #10]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	e01b      	b.n	8001906 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018ce:	897b      	ldrh	r3, [r7, #10]
 80018d0:	11db      	asrs	r3, r3, #7
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f003 0306 	and.w	r3, r3, #6
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f063 030f 	orn	r3, r3, #15
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	490f      	ldr	r1, [pc, #60]	; (8001928 <I2C_MasterRequestWrite+0xfc>)
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f876 	bl	80019de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e010      	b.n	800191e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018fc:	897b      	ldrh	r3, [r7, #10]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <I2C_MasterRequestWrite+0x100>)
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f866 	bl	80019de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	00010008 	.word	0x00010008
 800192c:	00010002 	.word	0x00010002

08001930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001940:	e025      	b.n	800198e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d021      	beq.n	800198e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff fa61 	bl	8000e10 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d116      	bne.n	800198e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f043 0220 	orr.w	r2, r3, #32
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e023      	b.n	80019d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10d      	bne.n	80019b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4013      	ands	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	e00c      	b.n	80019ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4013      	ands	r3, r2
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf0c      	ite	eq
 80019c6:	2301      	moveq	r3, #1
 80019c8:	2300      	movne	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d0b6      	beq.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019ec:	e051      	b.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	d123      	bne.n	8001a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f043 0204 	orr.w	r2, r3, #4
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e046      	b.n	8001ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d021      	beq.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4e:	f7ff f9df 	bl	8000e10 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d302      	bcc.n	8001a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d116      	bne.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f043 0220 	orr.w	r2, r3, #32
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e020      	b.n	8001ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10c      	bne.n	8001ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	e00b      	b.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	43da      	mvns	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d18d      	bne.n	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae8:	e02d      	b.n	8001b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f878 	bl	8001be0 <I2C_IsAcknowledgeFailed>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e02d      	b.n	8001b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d021      	beq.n	8001b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b02:	f7ff f985 	bl	8000e10 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d302      	bcc.n	8001b18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d116      	bne.n	8001b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e007      	b.n	8001b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b50:	2b80      	cmp	r3, #128	; 0x80
 8001b52:	d1ca      	bne.n	8001aea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b6a:	e02d      	b.n	8001bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f837 	bl	8001be0 <I2C_IsAcknowledgeFailed>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e02d      	b.n	8001bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b82:	d021      	beq.n	8001bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b84:	f7ff f944 	bl	8000e10 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d302      	bcc.n	8001b9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0220 	orr.w	r2, r3, #32
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e007      	b.n	8001bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d1ca      	bne.n	8001b6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d11b      	bne.n	8001c30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f043 0204 	orr.w	r2, r3, #4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c6c:	f7ff f8d0 	bl	8000e10 <HAL_GetTick>
 8001c70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c72:	e009      	b.n	8001c88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c74:	f7ff f8cc 	bl	8000e10 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c82:	d901      	bls.n	8001c88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e01f      	b.n	8001cc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d1ee      	bne.n	8001c74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c9c:	f7ff f8b8 	bl	8000e10 <HAL_GetTick>
 8001ca0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ca2:	e009      	b.n	8001cb8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ca4:	f7ff f8b4 	bl	8000e10 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb2:	d901      	bls.n	8001cb8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e007      	b.n	8001cc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cc4:	d1ee      	bne.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	420e0040 	.word	0x420e0040
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	420e0044 	.word	0x420e0044

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0cc      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d90c      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d044      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d119      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e067      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4934      	ldr	r1, [pc, #208]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff f81e 	bl	8000e10 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff f81a 	bl	8000e10 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e04f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d20c      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f841 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	5cd3      	ldrb	r3, [r2, r3]
 8001e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff7e 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	08002750 	.word	0x08002750
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec8:	f7ff fff0 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ecc:	4601      	mov	r1, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08002760 	.word	0x08002760

08001eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f06:	4bc6      	ldr	r3, [pc, #792]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	f200 817e 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x324>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <HAL_RCC_GetSysClockFreq+0x30>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f51 	.word	0x08001f51
 8001f20:	08002211 	.word	0x08002211
 8001f24:	08002211 	.word	0x08002211
 8001f28:	08002211 	.word	0x08002211
 8001f2c:	08001f57 	.word	0x08001f57
 8001f30:	08002211 	.word	0x08002211
 8001f34:	08002211 	.word	0x08002211
 8001f38:	08002211 	.word	0x08002211
 8001f3c:	08001f5d 	.word	0x08001f5d
 8001f40:	08002211 	.word	0x08002211
 8001f44:	08002211 	.word	0x08002211
 8001f48:	08002211 	.word	0x08002211
 8001f4c:	080020b9 	.word	0x080020b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4bb4      	ldr	r3, [pc, #720]	; (8002224 <HAL_RCC_GetSysClockFreq+0x338>)
 8001f52:	613b      	str	r3, [r7, #16]
       break;
 8001f54:	e15f      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4bb4      	ldr	r3, [pc, #720]	; (8002228 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e15c      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4bb0      	ldr	r3, [pc, #704]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f66:	4bae      	ldr	r3, [pc, #696]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04a      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4bab      	ldr	r3, [pc, #684]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	ea03 0501 	and.w	r5, r3, r1
 8001f88:	ea04 0602 	and.w	r6, r4, r2
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4632      	mov	r2, r6
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	1b49      	subs	r1, r1, r5
 8001fa6:	eb62 0206 	sbc.w	r2, r2, r6
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0194      	lsls	r4, r2, #6
 8001fb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb8:	018b      	lsls	r3, r1, #6
 8001fba:	1a5b      	subs	r3, r3, r1
 8001fbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	00e2      	lsls	r2, r4, #3
 8001fca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	195b      	adds	r3, r3, r5
 8001fd6:	eb44 0406 	adc.w	r4, r4, r6
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	0262      	lsls	r2, r4, #9
 8001fe4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fe8:	0259      	lsls	r1, r3, #9
 8001fea:	460b      	mov	r3, r1
 8001fec:	4614      	mov	r4, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f7fe f902 	bl	8000204 <__aeabi_uldivmod>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e049      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002008:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	ea03 0501 	and.w	r5, r3, r1
 800201e:	ea04 0602 	and.w	r6, r4, r2
 8002022:	4629      	mov	r1, r5
 8002024:	4632      	mov	r2, r6
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	f04f 0400 	mov.w	r4, #0
 800202e:	0154      	lsls	r4, r2, #5
 8002030:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002034:	014b      	lsls	r3, r1, #5
 8002036:	4619      	mov	r1, r3
 8002038:	4622      	mov	r2, r4
 800203a:	1b49      	subs	r1, r1, r5
 800203c:	eb62 0206 	sbc.w	r2, r2, r6
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	0194      	lsls	r4, r2, #6
 800204a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	1a5b      	subs	r3, r3, r1
 8002052:	eb64 0402 	sbc.w	r4, r4, r2
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	00e2      	lsls	r2, r4, #3
 8002060:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002064:	00d9      	lsls	r1, r3, #3
 8002066:	460b      	mov	r3, r1
 8002068:	4614      	mov	r4, r2
 800206a:	195b      	adds	r3, r3, r5
 800206c:	eb44 0406 	adc.w	r4, r4, r6
 8002070:	f04f 0100 	mov.w	r1, #0
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	02a2      	lsls	r2, r4, #10
 800207a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800207e:	0299      	lsls	r1, r3, #10
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	4618      	mov	r0, r3
 8002086:	4621      	mov	r1, r4
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	f7fe f8b7 	bl	8000204 <__aeabi_uldivmod>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800209c:	4b60      	ldr	r3, [pc, #384]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	613b      	str	r3, [r7, #16]
      break;
 80020b6:	e0ae      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c2:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d04a      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ce:	4b54      	ldr	r3, [pc, #336]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	099b      	lsrs	r3, r3, #6
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	ea03 0501 	and.w	r5, r3, r1
 80020e4:	ea04 0602 	and.w	r6, r4, r2
 80020e8:	4629      	mov	r1, r5
 80020ea:	4632      	mov	r2, r6
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f04f 0400 	mov.w	r4, #0
 80020f4:	0154      	lsls	r4, r2, #5
 80020f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020fa:	014b      	lsls	r3, r1, #5
 80020fc:	4619      	mov	r1, r3
 80020fe:	4622      	mov	r2, r4
 8002100:	1b49      	subs	r1, r1, r5
 8002102:	eb62 0206 	sbc.w	r2, r2, r6
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	0194      	lsls	r4, r2, #6
 8002110:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002114:	018b      	lsls	r3, r1, #6
 8002116:	1a5b      	subs	r3, r3, r1
 8002118:	eb64 0402 	sbc.w	r4, r4, r2
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	00e2      	lsls	r2, r4, #3
 8002126:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800212a:	00d9      	lsls	r1, r3, #3
 800212c:	460b      	mov	r3, r1
 800212e:	4614      	mov	r4, r2
 8002130:	195b      	adds	r3, r3, r5
 8002132:	eb44 0406 	adc.w	r4, r4, r6
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	0262      	lsls	r2, r4, #9
 8002140:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002144:	0259      	lsls	r1, r3, #9
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	4618      	mov	r0, r3
 800214c:	4621      	mov	r1, r4
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f04f 0400 	mov.w	r4, #0
 8002154:	461a      	mov	r2, r3
 8002156:	4623      	mov	r3, r4
 8002158:	f7fe f854 	bl	8000204 <__aeabi_uldivmod>
 800215c:	4603      	mov	r3, r0
 800215e:	460c      	mov	r4, r1
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e049      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002164:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	f04f 0400 	mov.w	r4, #0
 800216e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	ea03 0501 	and.w	r5, r3, r1
 800217a:	ea04 0602 	and.w	r6, r4, r2
 800217e:	4629      	mov	r1, r5
 8002180:	4632      	mov	r2, r6
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	f04f 0400 	mov.w	r4, #0
 800218a:	0154      	lsls	r4, r2, #5
 800218c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002190:	014b      	lsls	r3, r1, #5
 8002192:	4619      	mov	r1, r3
 8002194:	4622      	mov	r2, r4
 8002196:	1b49      	subs	r1, r1, r5
 8002198:	eb62 0206 	sbc.w	r2, r2, r6
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	f04f 0400 	mov.w	r4, #0
 80021a4:	0194      	lsls	r4, r2, #6
 80021a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021aa:	018b      	lsls	r3, r1, #6
 80021ac:	1a5b      	subs	r3, r3, r1
 80021ae:	eb64 0402 	sbc.w	r4, r4, r2
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	00e2      	lsls	r2, r4, #3
 80021bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021c0:	00d9      	lsls	r1, r3, #3
 80021c2:	460b      	mov	r3, r1
 80021c4:	4614      	mov	r4, r2
 80021c6:	195b      	adds	r3, r3, r5
 80021c8:	eb44 0406 	adc.w	r4, r4, r6
 80021cc:	f04f 0100 	mov.w	r1, #0
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	02a2      	lsls	r2, r4, #10
 80021d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021da:	0299      	lsls	r1, r3, #10
 80021dc:	460b      	mov	r3, r1
 80021de:	4614      	mov	r4, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	4621      	mov	r1, r4
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f04f 0400 	mov.w	r4, #0
 80021ea:	461a      	mov	r2, r3
 80021ec:	4623      	mov	r3, r4
 80021ee:	f7fe f809 	bl	8000204 <__aeabi_uldivmod>
 80021f2:	4603      	mov	r3, r0
 80021f4:	460c      	mov	r4, r1
 80021f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_GetSysClockFreq+0x334>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0f1b      	lsrs	r3, r3, #28
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	613b      	str	r3, [r7, #16]
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <HAL_RCC_GetSysClockFreq+0x338>)
 8002212:	613b      	str	r3, [r7, #16]
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	693b      	ldr	r3, [r7, #16]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	00f42400 	.word	0x00f42400
 8002228:	007a1200 	.word	0x007a1200

0800222c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8083 	beq.w	800234c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002246:	4b95      	ldr	r3, [pc, #596]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b04      	cmp	r3, #4
 8002250:	d019      	beq.n	8002286 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002252:	4b92      	ldr	r3, [pc, #584]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800225a:	2b08      	cmp	r3, #8
 800225c:	d106      	bne.n	800226c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800225e:	4b8f      	ldr	r3, [pc, #572]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226a:	d00c      	beq.n	8002286 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226c:	4b8b      	ldr	r3, [pc, #556]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d112      	bne.n	800229e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002278:	4b88      	ldr	r3, [pc, #544]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002284:	d10b      	bne.n	800229e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002286:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d05b      	beq.n	800234a <HAL_RCC_OscConfig+0x11e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d157      	bne.n	800234a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e216      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x8a>
 80022a8:	4b7c      	ldr	r3, [pc, #496]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a7b      	ldr	r2, [pc, #492]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e01d      	b.n	80022f2 <HAL_RCC_OscConfig+0xc6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0xae>
 80022c0:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a75      	ldr	r2, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a72      	ldr	r2, [pc, #456]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0xc6>
 80022da:	4b70      	ldr	r3, [pc, #448]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6f      	ldr	r2, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b6d      	ldr	r3, [pc, #436]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6c      	ldr	r2, [pc, #432]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80022ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d013      	beq.n	8002322 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fd89 	bl	8000e10 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002302:	f7fe fd85 	bl	8000e10 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1db      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0xd6>
 8002320:	e014      	b.n	800234c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fd75 	bl	8000e10 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232a:	f7fe fd71 	bl	8000e10 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1c7      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233c:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0xfe>
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d06f      	beq.n	8002438 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	d017      	beq.n	8002394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002364:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800236c:	2b08      	cmp	r3, #8
 800236e:	d105      	bne.n	800237c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002370:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d11c      	bne.n	80023c2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002388:	4b44      	ldr	r3, [pc, #272]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d116      	bne.n	80023c2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002394:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x180>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e18f      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4938      	ldr	r1, [pc, #224]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c0:	e03a      	b.n	8002438 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d020      	beq.n	800240c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ca:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fd1e 	bl	8000e10 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d8:	f7fe fd1a 	bl	8000e10 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e170      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4925      	ldr	r1, [pc, #148]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
 800240a:	e015      	b.n	8002438 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fcfd 	bl	8000e10 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fcf9 	bl	8000e10 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e14f      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d037      	beq.n	80024b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d016      	beq.n	800247a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x278>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7fe fcdd 	bl	8000e10 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe fcd9 	bl	8000e10 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e12f      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x270>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x22e>
 8002478:	e01c      	b.n	80024b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_OscConfig+0x278>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe fcc6 	bl	8000e10 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002486:	e00f      	b.n	80024a8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe fcc2 	bl	8000e10 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d908      	bls.n	80024a8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e118      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	42470000 	.word	0x42470000
 80024a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b8a      	ldr	r3, [pc, #552]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e9      	bne.n	8002488 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8097 	beq.w	80025f0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b83      	ldr	r3, [pc, #524]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a7e      	ldr	r2, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0x4ac>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe fc81 	bl	8000e10 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe fc7d 	bl	8000e10 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0d3      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b6c      	ldr	r3, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x4ac>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x31a>
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x354>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x33c>
 800254e:	4b61      	ldr	r3, [pc, #388]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a60      	ldr	r2, [pc, #384]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a5d      	ldr	r2, [pc, #372]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x354>
 8002568:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a59      	ldr	r2, [pc, #356]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
 8002574:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	4a56      	ldr	r2, [pc, #344]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe fc42 	bl	8000e10 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fc3e 	bl	8000e10 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e092      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	4b4b      	ldr	r3, [pc, #300]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ee      	beq.n	8002590 <HAL_RCC_OscConfig+0x364>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fc2c 	bl	8000e10 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fc28 	bl	8000e10 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e07c      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d2:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ee      	bne.n	80025bc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d068      	beq.n	80026ca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d060      	beq.n	80026c6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d145      	bne.n	8002698 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_OscConfig+0x4b0>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fbfd 	bl	8000e10 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fbf9 	bl	8000e10 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e04f      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	071b      	lsls	r3, r3, #28
 8002664:	491b      	ldr	r1, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_RCC_OscConfig+0x4b0>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fbce 	bl	8000e10 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fbca 	bl	8000e10 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e020      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x44c>
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_OscConfig+0x4b0>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe fbb7 	bl	8000e10 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fbb3 	bl	8000e10 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e009      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_OscConfig+0x4a8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x47a>
 80026c4:	e001      	b.n	80026ca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42470060 	.word	0x42470060

080026e0 <__libc_init_array>:
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	4e0d      	ldr	r6, [pc, #52]	; (8002718 <__libc_init_array+0x38>)
 80026e4:	4c0d      	ldr	r4, [pc, #52]	; (800271c <__libc_init_array+0x3c>)
 80026e6:	1ba4      	subs	r4, r4, r6
 80026e8:	10a4      	asrs	r4, r4, #2
 80026ea:	2500      	movs	r5, #0
 80026ec:	42a5      	cmp	r5, r4
 80026ee:	d109      	bne.n	8002704 <__libc_init_array+0x24>
 80026f0:	4e0b      	ldr	r6, [pc, #44]	; (8002720 <__libc_init_array+0x40>)
 80026f2:	4c0c      	ldr	r4, [pc, #48]	; (8002724 <__libc_init_array+0x44>)
 80026f4:	f000 f820 	bl	8002738 <_init>
 80026f8:	1ba4      	subs	r4, r4, r6
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	2500      	movs	r5, #0
 80026fe:	42a5      	cmp	r5, r4
 8002700:	d105      	bne.n	800270e <__libc_init_array+0x2e>
 8002702:	bd70      	pop	{r4, r5, r6, pc}
 8002704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002708:	4798      	blx	r3
 800270a:	3501      	adds	r5, #1
 800270c:	e7ee      	b.n	80026ec <__libc_init_array+0xc>
 800270e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002712:	4798      	blx	r3
 8002714:	3501      	adds	r5, #1
 8002716:	e7f2      	b.n	80026fe <__libc_init_array+0x1e>
 8002718:	08002770 	.word	0x08002770
 800271c:	08002770 	.word	0x08002770
 8002720:	08002770 	.word	0x08002770
 8002724:	08002774 	.word	0x08002774

08002728 <memset>:
 8002728:	4402      	add	r2, r0
 800272a:	4603      	mov	r3, r0
 800272c:	4293      	cmp	r3, r2
 800272e:	d100      	bne.n	8002732 <memset+0xa>
 8002730:	4770      	bx	lr
 8002732:	f803 1b01 	strb.w	r1, [r3], #1
 8002736:	e7f9      	b.n	800272c <memset+0x4>

08002738 <_init>:
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	bf00      	nop
 800273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273e:	bc08      	pop	{r3}
 8002740:	469e      	mov	lr, r3
 8002742:	4770      	bx	lr

08002744 <_fini>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	bf00      	nop
 8002748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274a:	bc08      	pop	{r3}
 800274c:	469e      	mov	lr, r3
 800274e:	4770      	bx	lr
