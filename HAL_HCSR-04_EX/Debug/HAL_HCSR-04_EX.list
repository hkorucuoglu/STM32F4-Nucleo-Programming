
HAL_HCSR-04_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e48  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800100c  0800100c  0001100c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800102c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000028  2000000c  08001038  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000034  08001038  00020034  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000519b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012ad  00000000  00000000  000251d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001869  00000000  00000000  00026484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000400  00000000  00000000  00027cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004b8  00000000  00000000  000280f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000023b9  00000000  00000000  000285a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001ae7  00000000  00000000  0002a961  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002c448  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000908  00000000  00000000  0002c4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ff4 	.word	0x08000ff4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000ff4 	.word	0x08000ff4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f888 	bl	8000640 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f84a 	bl	80005d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f81b 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f000 fcac 	bl	8000ee0 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000030 	.word	0x20000030
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000030 	.word	0x20000030

080005b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c4:	0200      	lsls	r0, r0, #8
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	68dc      	ldr	r4, [r3, #12]
 80005de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	bf28      	it	cs
 80005ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 0501 	mov.w	r5, #1
 80005f4:	fa05 f303 	lsl.w	r3, r5, r3
 80005f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fc:	bf8c      	ite	hi
 80005fe:	3c03      	subhi	r4, #3
 8000600:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000602:	4019      	ands	r1, r3
 8000604:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000606:	fa05 f404 	lsl.w	r4, r5, r4
 800060a:	3c01      	subs	r4, #1
 800060c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800060e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	ea42 0201 	orr.w	r2, r2, r1
 8000614:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	bfad      	iteet	ge
 800061a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	f000 000f 	andlt.w	r0, r0, #15
 8000622:	4b06      	ldrlt	r3, [pc, #24]	; (800063c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfb5      	itete	lt
 800062a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	e000ed14 	.word	0xe000ed14

08000640 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	3801      	subs	r0, #1
 8000642:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000646:	d20a      	bcs.n	800065e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	21f0      	movs	r1, #240	; 0xf0
 8000650:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800065e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000670:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000672:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000674:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000818 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000678:	4a65      	ldr	r2, [pc, #404]	; (8000810 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800067a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800081c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000680:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000682:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000684:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000686:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000688:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800068a:	42ac      	cmp	r4, r5
 800068c:	f040 80ac 	bne.w	80007e8 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000690:	684c      	ldr	r4, [r1, #4]
 8000692:	f024 0c10 	bic.w	ip, r4, #16
 8000696:	f10c 36ff 	add.w	r6, ip, #4294967295
 800069a:	2e01      	cmp	r6, #1
 800069c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006a0:	d812      	bhi.n	80006c8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006a2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006a4:	2603      	movs	r6, #3
 80006a6:	fa06 f60e 	lsl.w	r6, r6, lr
 80006aa:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006ae:	68ce      	ldr	r6, [r1, #12]
 80006b0:	fa06 f60e 	lsl.w	r6, r6, lr
 80006b4:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006b6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006b8:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ba:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006be:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006c2:	409e      	lsls	r6, r3
 80006c4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006c6:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006c8:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006ca:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006cc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d0:	43f6      	mvns	r6, r6
 80006d2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006d6:	688f      	ldr	r7, [r1, #8]
 80006d8:	fa07 f70e 	lsl.w	r7, r7, lr
 80006dc:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e6:	d116      	bne.n	8000716 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80006e8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006ec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006f4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006fc:	f04f 0c0f 	mov.w	ip, #15
 8000700:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000704:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000708:	690f      	ldr	r7, [r1, #16]
 800070a:	fa07 f70b 	lsl.w	r7, r7, fp
 800070e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000712:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000716:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000718:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071a:	f004 0703 	and.w	r7, r4, #3
 800071e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000722:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000726:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000728:	00e6      	lsls	r6, r4, #3
 800072a:	d55d      	bpl.n	80007e8 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072c:	f04f 0b00 	mov.w	fp, #0
 8000730:	f8cd b00c 	str.w	fp, [sp, #12]
 8000734:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000738:	4e36      	ldr	r6, [pc, #216]	; (8000814 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800073e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000742:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000746:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800074a:	9703      	str	r7, [sp, #12]
 800074c:	9f03      	ldr	r7, [sp, #12]
 800074e:	f023 0703 	bic.w	r7, r3, #3
 8000752:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000756:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800075a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800075e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000762:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000766:	f04f 0e0f 	mov.w	lr, #15
 800076a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000770:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000774:	d03f      	beq.n	80007f6 <HAL_GPIO_Init+0x18a>
 8000776:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800077a:	42b0      	cmp	r0, r6
 800077c:	d03d      	beq.n	80007fa <HAL_GPIO_Init+0x18e>
 800077e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000782:	42b0      	cmp	r0, r6
 8000784:	d03b      	beq.n	80007fe <HAL_GPIO_Init+0x192>
 8000786:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800078a:	42b0      	cmp	r0, r6
 800078c:	d039      	beq.n	8000802 <HAL_GPIO_Init+0x196>
 800078e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000792:	42b0      	cmp	r0, r6
 8000794:	d037      	beq.n	8000806 <HAL_GPIO_Init+0x19a>
 8000796:	4548      	cmp	r0, r9
 8000798:	d037      	beq.n	800080a <HAL_GPIO_Init+0x19e>
 800079a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800079e:	42b0      	cmp	r0, r6
 80007a0:	bf14      	ite	ne
 80007a2:	2607      	movne	r6, #7
 80007a4:	2606      	moveq	r6, #6
 80007a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80007aa:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ae:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007b0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b8:	bf0c      	ite	eq
 80007ba:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007bc:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007be:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007c0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c6:	bf0c      	ite	eq
 80007c8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007ca:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007cc:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ce:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d4:	bf0c      	ite	eq
 80007d6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007d8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007da:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007dc:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007de:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf54      	ite	pl
 80007e2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007e4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007e6:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e8:	3301      	adds	r3, #1
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	f47f af49 	bne.w	8000682 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f0:	b005      	add	sp, #20
 80007f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f6:	465e      	mov	r6, fp
 80007f8:	e7d5      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 80007fa:	2601      	movs	r6, #1
 80007fc:	e7d3      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 80007fe:	2602      	movs	r6, #2
 8000800:	e7d1      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 8000802:	2603      	movs	r6, #3
 8000804:	e7cf      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 8000806:	2604      	movs	r6, #4
 8000808:	e7cd      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 800080a:	2605      	movs	r6, #5
 800080c:	e7cb      	b.n	80007a6 <HAL_GPIO_Init+0x13a>
 800080e:	bf00      	nop
 8000810:	40013c00 	.word	0x40013c00
 8000814:	40020000 	.word	0x40020000
 8000818:	40023800 	.word	0x40023800
 800081c:	40021400 	.word	0x40021400

08000820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000820:	6903      	ldr	r3, [r0, #16]
 8000822:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000824:	bf14      	ite	ne
 8000826:	2001      	movne	r0, #1
 8000828:	2000      	moveq	r0, #0
 800082a:	4770      	bx	lr

0800082c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800082c:	b10a      	cbz	r2, 8000832 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800082e:	6181      	str	r1, [r0, #24]
 8000830:	4770      	bx	lr
 8000832:	0409      	lsls	r1, r1, #16
 8000834:	e7fb      	b.n	800082e <HAL_GPIO_WritePin+0x2>
	...

08000838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800083c:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800083e:	4604      	mov	r4, r0
 8000840:	b910      	cbnz	r0, 8000848 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000848:	4b44      	ldr	r3, [pc, #272]	; (800095c <HAL_RCC_ClockConfig+0x124>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	f002 020f 	and.w	r2, r2, #15
 8000850:	428a      	cmp	r2, r1
 8000852:	d329      	bcc.n	80008a8 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000854:	6821      	ldr	r1, [r4, #0]
 8000856:	078f      	lsls	r7, r1, #30
 8000858:	d42e      	bmi.n	80008b8 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085a:	07c8      	lsls	r0, r1, #31
 800085c:	d441      	bmi.n	80008e2 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800085e:	4b3f      	ldr	r3, [pc, #252]	; (800095c <HAL_RCC_ClockConfig+0x124>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	f002 020f 	and.w	r2, r2, #15
 8000866:	4295      	cmp	r5, r2
 8000868:	d367      	bcc.n	800093a <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086a:	6822      	ldr	r2, [r4, #0]
 800086c:	0751      	lsls	r1, r2, #29
 800086e:	d46d      	bmi.n	800094c <HAL_RCC_ClockConfig+0x114>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000870:	0713      	lsls	r3, r2, #28
 8000872:	d507      	bpl.n	8000884 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000874:	4a3a      	ldr	r2, [pc, #232]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 8000876:	6921      	ldr	r1, [r4, #16]
 8000878:	6893      	ldr	r3, [r2, #8]
 800087a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800087e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000882:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000884:	f000 f874 	bl	8000970 <HAL_RCC_GetSysClockFreq>
 8000888:	4b35      	ldr	r3, [pc, #212]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 800088a:	4a36      	ldr	r2, [pc, #216]	; (8000964 <HAL_RCC_ClockConfig+0x12c>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	40d8      	lsrs	r0, r3
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <HAL_RCC_ClockConfig+0x130>)
 8000898:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <HAL_RCC_ClockConfig+0x134>)
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f7ff fe39 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 80008a2:	2000      	movs	r0, #0
 80008a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008a8:	b2ca      	uxtb	r2, r1
 80008aa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d1c5      	bne.n	8000842 <HAL_RCC_ClockConfig+0xa>
 80008b6:	e7cd      	b.n	8000854 <HAL_RCC_ClockConfig+0x1c>
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008be:	bf1e      	ittt	ne
 80008c0:	689a      	ldrne	r2, [r3, #8]
 80008c2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80008c6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008ca:	bf42      	ittt	mi
 80008cc:	689a      	ldrmi	r2, [r3, #8]
 80008ce:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80008d2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	68a0      	ldr	r0, [r4, #8]
 80008d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008dc:	4302      	orrs	r2, r0
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	e7bb      	b.n	800085a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e2:	6862      	ldr	r2, [r4, #4]
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 80008e6:	2a01      	cmp	r2, #1
 80008e8:	d11d      	bne.n	8000926 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f0:	d0a7      	beq.n	8000842 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008f2:	4e1b      	ldr	r6, [pc, #108]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 80008f4:	68b3      	ldr	r3, [r6, #8]
 80008f6:	f023 0303 	bic.w	r3, r3, #3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80008fe:	f7ff fe53 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000902:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000906:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000908:	68b3      	ldr	r3, [r6, #8]
 800090a:	6862      	ldr	r2, [r4, #4]
 800090c:	f003 030c 	and.w	r3, r3, #12
 8000910:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000914:	d0a3      	beq.n	800085e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000916:	f7ff fe47 	bl	80005a8 <HAL_GetTick>
 800091a:	1bc0      	subs	r0, r0, r7
 800091c:	4540      	cmp	r0, r8
 800091e:	d9f3      	bls.n	8000908 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000920:	2003      	movs	r0, #3
}
 8000922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000926:	1e91      	subs	r1, r2, #2
 8000928:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800092a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800092c:	d802      	bhi.n	8000934 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800092e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000932:	e7dd      	b.n	80008f0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000934:	f013 0f02 	tst.w	r3, #2
 8000938:	e7da      	b.n	80008f0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800093a:	b2ea      	uxtb	r2, r5
 800093c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	429d      	cmp	r5, r3
 8000946:	f47f af7c 	bne.w	8000842 <HAL_RCC_ClockConfig+0xa>
 800094a:	e78e      	b.n	800086a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <HAL_RCC_ClockConfig+0x128>)
 800094e:	68e0      	ldr	r0, [r4, #12]
 8000950:	688b      	ldr	r3, [r1, #8]
 8000952:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000956:	4303      	orrs	r3, r0
 8000958:	608b      	str	r3, [r1, #8]
 800095a:	e789      	b.n	8000870 <HAL_RCC_ClockConfig+0x38>
 800095c:	40023c00 	.word	0x40023c00
 8000960:	40023800 	.word	0x40023800
 8000964:	0800100c 	.word	0x0800100c
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000970:	4920      	ldr	r1, [pc, #128]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000972:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000974:	688b      	ldr	r3, [r1, #8]
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b08      	cmp	r3, #8
 800097c:	d007      	beq.n	800098e <HAL_RCC_GetSysClockFreq+0x1e>
 800097e:	2b0c      	cmp	r3, #12
 8000980:	d020      	beq.n	80009c4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000982:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x88>)
 8000984:	481d      	ldr	r0, [pc, #116]	; (80009fc <HAL_RCC_GetSysClockFreq+0x8c>)
 8000986:	2b04      	cmp	r3, #4
 8000988:	bf18      	it	ne
 800098a:	4610      	movne	r0, r2
 800098c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800098e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000990:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000992:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000994:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000998:	bf14      	ite	ne
 800099a:	4818      	ldrne	r0, [pc, #96]	; (80009fc <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800099c:	4816      	ldreq	r0, [pc, #88]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800099e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80009a2:	bf18      	it	ne
 80009a4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009aa:	fba1 0100 	umull	r0, r1, r1, r0
 80009ae:	f7ff fc29 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80009ba:	3301      	adds	r3, #1
 80009bc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80009be:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009c2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009c4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009c6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009c8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009ca:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009ce:	bf14      	ite	ne
 80009d0:	480a      	ldrne	r0, [pc, #40]	; (80009fc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009d2:	4809      	ldreq	r0, [pc, #36]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80009d8:	bf18      	it	ne
 80009da:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009e0:	fba1 0100 	umull	r0, r1, r1, r0
 80009e4:	f7ff fc0e 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80009f0:	e7e5      	b.n	80009be <HAL_RCC_GetSysClockFreq+0x4e>
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	00f42400 	.word	0x00f42400
 80009fc:	017d7840 	.word	0x017d7840

08000a00 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a00:	6803      	ldr	r3, [r0, #0]
{
 8000a02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a06:	07df      	lsls	r7, r3, #31
{
 8000a08:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a0a:	d410      	bmi.n	8000a2e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	079e      	lsls	r6, r3, #30
 8000a10:	d467      	bmi.n	8000ae2 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	071a      	lsls	r2, r3, #28
 8000a16:	f100 80b2 	bmi.w	8000b7e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	075b      	lsls	r3, r3, #29
 8000a1e:	f100 80d0 	bmi.w	8000bc2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a22:	69a2      	ldr	r2, [r4, #24]
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	f040 8139 	bne.w	8000c9c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	e01e      	b.n	8000a6c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a2e:	4b97      	ldr	r3, [pc, #604]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	f002 020c 	and.w	r2, r2, #12
 8000a36:	2a04      	cmp	r2, #4
 8000a38:	d010      	beq.n	8000a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000a40:	2a08      	cmp	r2, #8
 8000a42:	d102      	bne.n	8000a4a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	025d      	lsls	r5, r3, #9
 8000a48:	d408      	bmi.n	8000a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a4a:	4b90      	ldr	r3, [pc, #576]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000a52:	2a0c      	cmp	r2, #12
 8000a54:	d10d      	bne.n	8000a72 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	0250      	lsls	r0, r2, #9
 8000a5a:	d50a      	bpl.n	8000a72 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5c:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	0399      	lsls	r1, r3, #14
 8000a62:	d5d3      	bpl.n	8000a0c <HAL_RCC_OscConfig+0xc>
 8000a64:	6863      	ldr	r3, [r4, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1d0      	bne.n	8000a0c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a6a:	2001      	movs	r0, #1
}
 8000a6c:	b002      	add	sp, #8
 8000a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a72:	6862      	ldr	r2, [r4, #4]
 8000a74:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a78:	d111      	bne.n	8000a9e <HAL_RCC_OscConfig+0x9e>
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a82:	f7ff fd91 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a86:	4d81      	ldr	r5, [pc, #516]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000a88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a8a:	682b      	ldr	r3, [r5, #0]
 8000a8c:	039a      	lsls	r2, r3, #14
 8000a8e:	d4bd      	bmi.n	8000a0c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a90:	f7ff fd8a 	bl	80005a8 <HAL_GetTick>
 8000a94:	1b80      	subs	r0, r0, r6
 8000a96:	2864      	cmp	r0, #100	; 0x64
 8000a98:	d9f7      	bls.n	8000a8a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	e7e6      	b.n	8000a6c <HAL_RCC_OscConfig+0x6c>
 8000a9e:	4d7b      	ldr	r5, [pc, #492]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	d107      	bne.n	8000ab8 <HAL_RCC_OscConfig+0xb8>
 8000aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aac:	602b      	str	r3, [r5, #0]
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab4:	602b      	str	r3, [r5, #0]
 8000ab6:	e7e4      	b.n	8000a82 <HAL_RCC_OscConfig+0x82>
 8000ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000abc:	602b      	str	r3, [r5, #0]
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	d1db      	bne.n	8000a82 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000aca:	f7ff fd6d 	bl	80005a8 <HAL_GetTick>
 8000ace:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	039b      	lsls	r3, r3, #14
 8000ad4:	d59a      	bpl.n	8000a0c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fd67 	bl	80005a8 <HAL_GetTick>
 8000ada:	1b80      	subs	r0, r0, r6
 8000adc:	2864      	cmp	r0, #100	; 0x64
 8000ade:	d9f7      	bls.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
 8000ae0:	e7db      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	f012 0f0c 	tst.w	r2, #12
 8000aea:	d010      	beq.n	8000b0e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000af2:	2a08      	cmp	r2, #8
 8000af4:	d102      	bne.n	8000afc <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	025f      	lsls	r7, r3, #9
 8000afa:	d508      	bpl.n	8000b0e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000afc:	4a63      	ldr	r2, [pc, #396]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000afe:	6893      	ldr	r3, [r2, #8]
 8000b00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000b04:	2b0c      	cmp	r3, #12
 8000b06:	d111      	bne.n	8000b2c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b08:	6853      	ldr	r3, [r2, #4]
 8000b0a:	025e      	lsls	r6, r3, #9
 8000b0c:	d40e      	bmi.n	8000b2c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b0e:	4b5f      	ldr	r3, [pc, #380]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	0795      	lsls	r5, r2, #30
 8000b14:	d502      	bpl.n	8000b1c <HAL_RCC_OscConfig+0x11c>
 8000b16:	68e2      	ldr	r2, [r4, #12]
 8000b18:	2a01      	cmp	r2, #1
 8000b1a:	d1a6      	bne.n	8000a6a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	6921      	ldr	r1, [r4, #16]
 8000b20:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b24:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b2a:	e772      	b.n	8000a12 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b2c:	68e2      	ldr	r2, [r4, #12]
 8000b2e:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <HAL_RCC_OscConfig+0x290>)
 8000b30:	b1b2      	cbz	r2, 8000b60 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b36:	f7ff fd37 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3a:	4d54      	ldr	r5, [pc, #336]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000b3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	0798      	lsls	r0, r3, #30
 8000b42:	d507      	bpl.n	8000b54 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	6922      	ldr	r2, [r4, #16]
 8000b48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b50:	602b      	str	r3, [r5, #0]
 8000b52:	e75e      	b.n	8000a12 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b54:	f7ff fd28 	bl	80005a8 <HAL_GetTick>
 8000b58:	1b80      	subs	r0, r0, r6
 8000b5a:	2802      	cmp	r0, #2
 8000b5c:	d9ef      	bls.n	8000b3e <HAL_RCC_OscConfig+0x13e>
 8000b5e:	e79c      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000b60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b62:	f7ff fd21 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b66:	4d49      	ldr	r5, [pc, #292]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000b68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b6a:	682b      	ldr	r3, [r5, #0]
 8000b6c:	0799      	lsls	r1, r3, #30
 8000b6e:	f57f af50 	bpl.w	8000a12 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b72:	f7ff fd19 	bl	80005a8 <HAL_GetTick>
 8000b76:	1b80      	subs	r0, r0, r6
 8000b78:	2802      	cmp	r0, #2
 8000b7a:	d9f6      	bls.n	8000b6a <HAL_RCC_OscConfig+0x16a>
 8000b7c:	e78d      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b7e:	6962      	ldr	r2, [r4, #20]
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <HAL_RCC_OscConfig+0x294>)
 8000b82:	b17a      	cbz	r2, 8000ba4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b88:	f7ff fd0e 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b8c:	4d3f      	ldr	r5, [pc, #252]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000b8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b92:	079f      	lsls	r7, r3, #30
 8000b94:	f53f af41 	bmi.w	8000a1a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b98:	f7ff fd06 	bl	80005a8 <HAL_GetTick>
 8000b9c:	1b80      	subs	r0, r0, r6
 8000b9e:	2802      	cmp	r0, #2
 8000ba0:	d9f6      	bls.n	8000b90 <HAL_RCC_OscConfig+0x190>
 8000ba2:	e77a      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000ba4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ba6:	f7ff fcff 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000baa:	4d38      	ldr	r5, [pc, #224]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000bac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bb0:	0798      	lsls	r0, r3, #30
 8000bb2:	f57f af32 	bpl.w	8000a1a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bb6:	f7ff fcf7 	bl	80005a8 <HAL_GetTick>
 8000bba:	1b80      	subs	r0, r0, r6
 8000bbc:	2802      	cmp	r0, #2
 8000bbe:	d9f6      	bls.n	8000bae <HAL_RCC_OscConfig+0x1ae>
 8000bc0:	e76b      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000bca:	d128      	bne.n	8000c1e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	9201      	str	r2, [sp, #4]
 8000bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000be0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be2:	4d2d      	ldr	r5, [pc, #180]	; (8000c98 <HAL_RCC_OscConfig+0x298>)
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	05d9      	lsls	r1, r3, #23
 8000be8:	d51b      	bpl.n	8000c22 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bea:	68a3      	ldr	r3, [r4, #8]
 8000bec:	4d27      	ldr	r5, [pc, #156]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d127      	bne.n	8000c42 <HAL_RCC_OscConfig+0x242>
 8000bf2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000bfa:	f7ff fcd5 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bfe:	4d23      	ldr	r5, [pc, #140]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000c00:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c02:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c06:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c08:	079b      	lsls	r3, r3, #30
 8000c0a:	d539      	bpl.n	8000c80 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	f43f af08 	beq.w	8000a22 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <HAL_RCC_OscConfig+0x28c>)
 8000c14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	e701      	b.n	8000a22 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000c1e:	2600      	movs	r6, #0
 8000c20:	e7df      	b.n	8000be2 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c2a:	f7ff fcbd 	bl	80005a8 <HAL_GetTick>
 8000c2e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	05da      	lsls	r2, r3, #23
 8000c34:	d4d9      	bmi.n	8000bea <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c36:	f7ff fcb7 	bl	80005a8 <HAL_GetTick>
 8000c3a:	1bc0      	subs	r0, r0, r7
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d9f7      	bls.n	8000c30 <HAL_RCC_OscConfig+0x230>
 8000c40:	e72b      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d104      	bne.n	8000c50 <HAL_RCC_OscConfig+0x250>
 8000c46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	672b      	str	r3, [r5, #112]	; 0x70
 8000c4e:	e7d0      	b.n	8000bf2 <HAL_RCC_OscConfig+0x1f2>
 8000c50:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	672a      	str	r2, [r5, #112]	; 0x70
 8000c58:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c5a:	f022 0204 	bic.w	r2, r2, #4
 8000c5e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1ca      	bne.n	8000bfa <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000c64:	f7ff fca0 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c68:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c6c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c6e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c70:	0798      	lsls	r0, r3, #30
 8000c72:	d5cb      	bpl.n	8000c0c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c74:	f7ff fc98 	bl	80005a8 <HAL_GetTick>
 8000c78:	1bc0      	subs	r0, r0, r7
 8000c7a:	4540      	cmp	r0, r8
 8000c7c:	d9f7      	bls.n	8000c6e <HAL_RCC_OscConfig+0x26e>
 8000c7e:	e70c      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c80:	f7ff fc92 	bl	80005a8 <HAL_GetTick>
 8000c84:	1bc0      	subs	r0, r0, r7
 8000c86:	4540      	cmp	r0, r8
 8000c88:	d9bd      	bls.n	8000c06 <HAL_RCC_OscConfig+0x206>
 8000c8a:	e706      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	42470000 	.word	0x42470000
 8000c94:	42470e80 	.word	0x42470e80
 8000c98:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c9c:	4d23      	ldr	r5, [pc, #140]	; (8000d2c <HAL_RCC_OscConfig+0x32c>)
 8000c9e:	68ab      	ldr	r3, [r5, #8]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	f43f aee0 	beq.w	8000a6a <HAL_RCC_OscConfig+0x6a>
 8000caa:	4e21      	ldr	r6, [pc, #132]	; (8000d30 <HAL_RCC_OscConfig+0x330>)
 8000cac:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cae:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000cb0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cb2:	d12d      	bne.n	8000d10 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fc78 	bl	80005a8 <HAL_GetTick>
 8000cb8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cba:	682b      	ldr	r3, [r5, #0]
 8000cbc:	0199      	lsls	r1, r3, #6
 8000cbe:	d421      	bmi.n	8000d04 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc0:	6a22      	ldr	r2, [r4, #32]
 8000cc2:	69e3      	ldr	r3, [r4, #28]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cc8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ccc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000cd2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000cd4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000cd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cda:	4c14      	ldr	r4, [pc, #80]	; (8000d2c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cdc:	0852      	lsrs	r2, r2, #1
 8000cde:	3a01      	subs	r2, #1
 8000ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ce4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000cea:	f7ff fc5d 	bl	80005a8 <HAL_GetTick>
 8000cee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	019a      	lsls	r2, r3, #6
 8000cf4:	f53f ae99 	bmi.w	8000a2a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf8:	f7ff fc56 	bl	80005a8 <HAL_GetTick>
 8000cfc:	1b40      	subs	r0, r0, r5
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d9f6      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x2f0>
 8000d02:	e6ca      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d04:	f7ff fc50 	bl	80005a8 <HAL_GetTick>
 8000d08:	1bc0      	subs	r0, r0, r7
 8000d0a:	2802      	cmp	r0, #2
 8000d0c:	d9d5      	bls.n	8000cba <HAL_RCC_OscConfig+0x2ba>
 8000d0e:	e6c4      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc4a 	bl	80005a8 <HAL_GetTick>
 8000d14:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d16:	682b      	ldr	r3, [r5, #0]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	f57f ae86 	bpl.w	8000a2a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d1e:	f7ff fc43 	bl	80005a8 <HAL_GetTick>
 8000d22:	1b00      	subs	r0, r0, r4
 8000d24:	2802      	cmp	r0, #2
 8000d26:	d9f6      	bls.n	8000d16 <HAL_RCC_OscConfig+0x316>
 8000d28:	e6b7      	b.n	8000a9a <HAL_RCC_OscConfig+0x9a>
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	42470060 	.word	0x42470060

08000d34 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <DWT_Init+0x20>)
 8000d36:	68d3      	ldr	r3, [r2, #12]
 8000d38:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8000d3c:	d109      	bne.n	8000d52 <DWT_Init+0x1e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d3e:	68d1      	ldr	r1, [r2, #12]
 8000d40:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000d44:	60d1      	str	r1, [r2, #12]
        DWT->CYCCNT = 0;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <DWT_Init+0x24>)
 8000d48:	6053      	str	r3, [r2, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4770      	bx	lr
 8000d54:	e000edf0 	.word	0xe000edf0
 8000d58:	e0001000 	.word	0xe0001000

08000d5c <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <DWT_Delay+0x1c>)
             delayTicks = us * (SystemCoreClock/1000000);
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <DWT_Delay+0x20>)
    uint32_t startTick = DWT->CYCCNT,
 8000d60:	6851      	ldr	r1, [r2, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8000d62:	681b      	ldr	r3, [r3, #0]
{
 8000d64:	b510      	push	{r4, lr}
             delayTicks = us * (SystemCoreClock/1000000);
 8000d66:	4c06      	ldr	r4, [pc, #24]	; (8000d80 <DWT_Delay+0x24>)
 8000d68:	fbb3 f3f4 	udiv	r3, r3, r4
 8000d6c:	4358      	muls	r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8000d6e:	6853      	ldr	r3, [r2, #4]
 8000d70:	1a5b      	subs	r3, r3, r1
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d8fb      	bhi.n	8000d6e <DWT_Delay+0x12>
}
 8000d76:	bd10      	pop	{r4, pc}
 8000d78:	e0001000 	.word	0xe0001000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	000f4240 	.word	0x000f4240

08000d84 <READ_HCSR_04>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
uint16_t 	READ_HCSR_04()
{
 8000d84:	b570      	push	{r4, r5, r6, lr}
	uint16_t local_time=0;

	//	1. ready trig_pin to start
	HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET)	;
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <READ_HCSR_04+0x58>)
	HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_SET)	;
	DWT_Delay(10)	;
	HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET)	;

	//	3.	Wait for echo_pin input
	while(	!	HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin)	)	;
 8000d8c:	4c13      	ldr	r4, [pc, #76]	; (8000ddc <READ_HCSR_04+0x58>)
	HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET)	;
 8000d8e:	f7ff fd4d 	bl	800082c <HAL_GPIO_WritePin>
	DWT_Delay(4)	;
 8000d92:	2004      	movs	r0, #4
 8000d94:	f7ff ffe2 	bl	8000d5c <DWT_Delay>
	HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_SET)	;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	480f      	ldr	r0, [pc, #60]	; (8000ddc <READ_HCSR_04+0x58>)
 8000d9e:	f7ff fd45 	bl	800082c <HAL_GPIO_WritePin>
	DWT_Delay(10)	;
 8000da2:	200a      	movs	r0, #10
 8000da4:	f7ff ffda 	bl	8000d5c <DWT_Delay>
	HAL_GPIO_WritePin(Trig_GPIO_Port,Trig_Pin,GPIO_PIN_RESET)	;
 8000da8:	2200      	movs	r2, #0
 8000daa:	2102      	movs	r1, #2
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <READ_HCSR_04+0x58>)
 8000dae:	f7ff fd3d 	bl	800082c <HAL_GPIO_WritePin>
	while(	!	HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin)	)	;
 8000db2:	2101      	movs	r1, #1
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff fd33 	bl	8000820 <HAL_GPIO_ReadPin>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d0f9      	beq.n	8000db2 <READ_HCSR_04+0x2e>

	//	4.	started echo_pin timing

	while(HAL_GPIO_ReadPin(Echo_GPIO_Port,Echo_Pin))
 8000dbe:	4e07      	ldr	r6, [pc, #28]	; (8000ddc <READ_HCSR_04+0x58>)
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	f7ff fd2b 	bl	8000820 <HAL_GPIO_ReadPin>
 8000dca:	b2a5      	uxth	r5, r4
 8000dcc:	3401      	adds	r4, #1
 8000dce:	b908      	cbnz	r0, 8000dd4 <READ_HCSR_04+0x50>
		DWT_Delay(1)	;
	}

	//	5. when echo_pin's signal is continuous , local_time variable +1 for each 1 microsecond
	return	local_time	;
}
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
		DWT_Delay(1)	;
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff ffc1 	bl	8000d5c <DWT_Delay>
 8000dda:	e7f2      	b.n	8000dc2 <READ_HCSR_04+0x3e>
 8000ddc:	40020000 	.word	0x40020000

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b510      	push	{r4, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de4:	2234      	movs	r2, #52	; 0x34
 8000de6:	2100      	movs	r1, #0
 8000de8:	a807      	add	r0, sp, #28
 8000dea:	f000 f8fb 	bl	8000fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dee:	2100      	movs	r1, #0
 8000df0:	2214      	movs	r2, #20
 8000df2:	a802      	add	r0, sp, #8
 8000df4:	f000 f8f6 	bl	8000fe4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2400      	movs	r4, #0
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <SystemClock_Config+0x78>)
 8000dfc:	9400      	str	r4, [sp, #0]
 8000dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e12:	9401      	str	r4, [sp, #4]
 8000e14:	6813      	ldr	r3, [r2, #0]
 8000e16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e22:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e30:	2301      	movs	r3, #1
 8000e32:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e36:	2310      	movs	r3, #16
 8000e38:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f7ff fde1 	bl	8000a00 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e40:	4621      	mov	r1, r4
 8000e42:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e46:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4e:	f7ff fcf3 	bl	8000838 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000e52:	b014      	add	sp, #80	; 0x50
 8000e54:	bd10      	pop	{r4, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <main>:
{
 8000e60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	sensor_time	=	READ_HCSR_04()	;
 8000e62:	f7ff ff8f 	bl	8000d84 <READ_HCSR_04>
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <main+0x70>)
 8000e68:	6018      	str	r0, [r3, #0]
	distance	=	sensor_time	/	58	;
 8000e6a:	233a      	movs	r3, #58	; 0x3a
 8000e6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <main+0x74>)
 8000e72:	6018      	str	r0, [r3, #0]
  HAL_Init();
 8000e74:	f7ff fb72 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8000e78:	f7ff ffb2 	bl	8000de0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	2214      	movs	r2, #20
 8000e7e:	2100      	movs	r1, #0
 8000e80:	a801      	add	r0, sp, #4
 8000e82:	f000 f8af 	bl	8000fe4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2400      	movs	r4, #0
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <main+0x78>)
 8000e8a:	9400      	str	r4, [sp, #0]
 8000e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000e8e:	4813      	ldr	r0, [pc, #76]	; (8000edc <main+0x7c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	f042 0201 	orr.w	r2, r2, #1
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000e9c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000ea0:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000ea4:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000ea6:	f7ff fcc1 	bl	800082c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	a901      	add	r1, sp, #4
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <main+0x7c>)
  GPIO_InitStruct.Pin = Echo_Pin;
 8000eae:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f7ff fbda 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8000eb8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000eba:	a901      	add	r1, sp, #4
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <main+0x7c>)
  GPIO_InitStruct.Pin = Trig_Pin;
 8000ebe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f7ff fbd1 	bl	800066c <HAL_GPIO_Init>
  DWT_Init();
 8000eca:	f7ff ff33 	bl	8000d34 <DWT_Init>
 8000ece:	e7fe      	b.n	8000ece <main+0x6e>
 8000ed0:	2000002c 	.word	0x2000002c
 8000ed4:	20000028 	.word	0x20000028
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_MspInit+0x34>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	9100      	str	r1, [sp, #0]
 8000ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000eee:	645a      	str	r2, [r3, #68]	; 0x44
 8000ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ef2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	9101      	str	r1, [sp, #4]
 8000efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	b002      	add	sp, #8
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <NMI_Handler>:
 8000f18:	4770      	bx	lr

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler>

08000f22 <SVC_Handler>:
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f7ff bb32 	b.w	8000590 <HAL_IncTick>

08000f2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SystemInit+0x18>)
 8000f2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f32:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f4e:	e003      	b.n	8000f58 <LoopCopyDataInit>

08000f50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f56:	3104      	adds	r1, #4

08000f58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f60:	d3f6      	bcc.n	8000f50 <CopyDataInit>
  ldr  r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f64:	e002      	b.n	8000f6c <LoopFillZerobss>

08000f66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f68:	f842 3b04 	str.w	r3, [r2], #4

08000f6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f70:	d3f9      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f72:	f7ff ffdb 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f000 f811 	bl	8000f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff ff71 	bl	8000e60 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f84:	0800102c 	.word	0x0800102c
  ldr  r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f8c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f90:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f94:	20000034 	.word	0x20000034

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <__libc_init_array>:
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	4e0d      	ldr	r6, [pc, #52]	; (8000fd4 <__libc_init_array+0x38>)
 8000fa0:	4c0d      	ldr	r4, [pc, #52]	; (8000fd8 <__libc_init_array+0x3c>)
 8000fa2:	1ba4      	subs	r4, r4, r6
 8000fa4:	10a4      	asrs	r4, r4, #2
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	d109      	bne.n	8000fc0 <__libc_init_array+0x24>
 8000fac:	4e0b      	ldr	r6, [pc, #44]	; (8000fdc <__libc_init_array+0x40>)
 8000fae:	4c0c      	ldr	r4, [pc, #48]	; (8000fe0 <__libc_init_array+0x44>)
 8000fb0:	f000 f820 	bl	8000ff4 <_init>
 8000fb4:	1ba4      	subs	r4, r4, r6
 8000fb6:	10a4      	asrs	r4, r4, #2
 8000fb8:	2500      	movs	r5, #0
 8000fba:	42a5      	cmp	r5, r4
 8000fbc:	d105      	bne.n	8000fca <__libc_init_array+0x2e>
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
 8000fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc4:	4798      	blx	r3
 8000fc6:	3501      	adds	r5, #1
 8000fc8:	e7ee      	b.n	8000fa8 <__libc_init_array+0xc>
 8000fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fce:	4798      	blx	r3
 8000fd0:	3501      	adds	r5, #1
 8000fd2:	e7f2      	b.n	8000fba <__libc_init_array+0x1e>
 8000fd4:	08001024 	.word	0x08001024
 8000fd8:	08001024 	.word	0x08001024
 8000fdc:	08001024 	.word	0x08001024
 8000fe0:	08001028 	.word	0x08001028

08000fe4 <memset>:
 8000fe4:	4402      	add	r2, r0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d100      	bne.n	8000fee <memset+0xa>
 8000fec:	4770      	bx	lr
 8000fee:	f803 1b01 	strb.w	r1, [r3], #1
 8000ff2:	e7f9      	b.n	8000fe8 <memset+0x4>

08000ff4 <_init>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr

08001000 <_fini>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	bf00      	nop
 8001004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	469e      	mov	lr, r3
 800100a:	4770      	bx	lr
