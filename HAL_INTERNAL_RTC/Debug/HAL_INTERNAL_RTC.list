
HAL_INTERNAL_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004110  08004110  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004118  08004118  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08004190  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004190  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf73  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001be4  00000000  00000000  0002c013  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  0002e600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002207b  00000000  00000000  0002ef30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096d4  00000000  00000000  00050fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce084  00000000  00000000  0005a67f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba8  00000000  00000000  00128780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800409c 	.word	0x0800409c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800409c 	.word	0x0800409c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f023 030f 	bic.w	r3, r3, #15
 80005c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	f043 030c 	orr.w	r3, r3, #12
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	f043 030c 	orr.w	r3, r3, #12
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2304      	movs	r3, #4
 80005fa:	214e      	movs	r1, #78	; 0x4e
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <lcd_send_cmd+0x5c>)
 80005fe:	f001 f8a7 	bl	8001750 <HAL_I2C_Master_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000098 	.word	0x20000098

08000610 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	f043 030d 	orr.w	r3, r3, #13
 800062e:	b2db      	uxtb	r3, r3
 8000630:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	f043 0309 	orr.w	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	f043 030d 	orr.w	r3, r3, #13
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	f043 0309 	orr.w	r3, r3, #9
 800064c:	b2db      	uxtb	r3, r3
 800064e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000650:	f107 0208 	add.w	r2, r7, #8
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2304      	movs	r3, #4
 800065a:	214e      	movs	r1, #78	; 0x4e
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <lcd_send_data+0x5c>)
 800065e:	f001 f877 	bl	8001750 <HAL_I2C_Master_Transmit>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000098 	.word	0x20000098

08000670 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000674:	2032      	movs	r0, #50	; 0x32
 8000676:	f000 fc39 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x30);
 800067a:	2030      	movs	r0, #48	; 0x30
 800067c:	f7ff ff98 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000680:	2005      	movs	r0, #5
 8000682:	f000 fc33 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000686:	2030      	movs	r0, #48	; 0x30
 8000688:	f7ff ff92 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800068c:	2001      	movs	r0, #1
 800068e:	f000 fc2d 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000692:	2030      	movs	r0, #48	; 0x30
 8000694:	f7ff ff8c 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(10);
 8000698:	200a      	movs	r0, #10
 800069a:	f000 fc27 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800069e:	2020      	movs	r0, #32
 80006a0:	f7ff ff86 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 fc21 	bl	8000eec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006aa:	2028      	movs	r0, #40	; 0x28
 80006ac:	f7ff ff80 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fc1b 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006b6:	2008      	movs	r0, #8
 80006b8:	f7ff ff7a 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fc15 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006c2:	2001      	movs	r0, #1
 80006c4:	f7ff ff74 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fc0f 	bl	8000eec <HAL_Delay>
	HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 fc0c 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006d4:	2006      	movs	r0, #6
 80006d6:	f7ff ff6b 	bl	80005b0 <lcd_send_cmd>
	HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fc06 	bl	8000eec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006e0:	200c      	movs	r0, #12
 80006e2:	f7ff ff65 	bl	80005b0 <lcd_send_cmd>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}

080006ea <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006f2:	e006      	b.n	8000702 <lcd_send_string+0x18>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff87 	bl	8000610 <lcd_send_data>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1f4      	bne.n	80006f4 <lcd_send_string+0xa>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <set_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0

	  RTC_TimeTypeDef sTime = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]

	/** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x14;
 800072c:	2314      	movs	r3, #20
 800072e:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x17;
 8000730:	2317      	movs	r3, #23
 8000732:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x50;
 8000734:	2350      	movs	r3, #80	; 0x50
 8000736:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2201      	movs	r2, #1
 8000744:	4619      	mov	r1, r3
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <set_time+0x7c>)
 8000748:	f002 fc15 	bl	8002f76 <HAL_RTC_SetTime>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <set_time+0x42>
	  {
	    Error_Handler();
 8000752:	f000 fa17 	bl	8000b84 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000756:	2306      	movs	r3, #6
 8000758:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_SEPTEMBER;
 800075a:	2309      	movs	r3, #9
 800075c:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x12;
 800075e:	2312      	movs	r3, #18
 8000760:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x20;
 8000762:	2320      	movs	r3, #32
 8000764:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <set_time+0x7c>)
 800076e:	f002 fd1d 	bl	80031ac <HAL_RTC_SetDate>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <set_time+0x68>
	  {
	    Error_Handler();
 8000778:	f000 fa04 	bl	8000b84 <Error_Handler>
	  }

	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);	//	Backup register
 800077c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000780:	2101      	movs	r1, #1
 8000782:	4803      	ldr	r0, [pc, #12]	; (8000790 <set_time+0x7c>)
 8000784:	f003 f816 	bl	80037b4 <HAL_RTCEx_BKUPWrite>
}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000ec 	.word	0x200000ec

08000794 <set_alarm>:

void set_alarm(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0

	 RTC_AlarmTypeDef sAlarm = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2228      	movs	r2, #40	; 0x28
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 f86d 	bl	8003880 <memset>

	 /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0x14;
 80007a6:	2314      	movs	r3, #20
 80007a8:	703b      	strb	r3, [r7, #0]
	  sAlarm.AlarmTime.Minutes = 0x18;
 80007aa:	2318      	movs	r3, #24
 80007ac:	707b      	strb	r3, [r7, #1]
	  sAlarm.AlarmTime.Seconds = 0x0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	70bb      	strb	r3, [r7, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDay = 0x12;
 80007ca:	2312      	movs	r3, #18
 80007cc:	f887 3020 	strb.w	r3, [r7, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80007d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2201      	movs	r2, #1
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <set_alarm+0x60>)
 80007de:	f002 fddb 	bl	8003398 <HAL_RTC_SetAlarm_IT>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <set_alarm+0x58>
	  {
	    Error_Handler();
 80007e8:	f000 f9cc 	bl	8000b84 <Error_Handler>
	  }
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000ec 	.word	0x200000ec

080007f8 <get_time>:

void get_time(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af02      	add	r7, sp, #8

	RTC_DateTypeDef gDate ={0};
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef gTime ={0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);	//	Get the RTC current time value
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4813      	ldr	r0, [pc, #76]	; (8000864 <get_time+0x6c>)
 8000818:	f002 fc6a 	bl	80030f0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);	//	Get the RTC current date value
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	480f      	ldr	r0, [pc, #60]	; (8000864 <get_time+0x6c>)
 8000826:	f002 fd68 	bl	80032fa <HAL_RTC_GetDate>

	sprintf(time,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);		//	Display time format:  hh:mm:ss
 800082a:	783b      	ldrb	r3, [r7, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	787b      	ldrb	r3, [r7, #1]
 8000830:	4619      	mov	r1, r3
 8000832:	78bb      	ldrb	r3, [r7, #2]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	460b      	mov	r3, r1
 8000838:	490b      	ldr	r1, [pc, #44]	; (8000868 <get_time+0x70>)
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <get_time+0x74>)
 800083c:	f003 f828 	bl	8003890 <siprintf>
	sprintf(date,"%02d:%02d:%02d",gDate.Date,gDate.Month,gDate.Year+2000);		//	Display date format:  dd:mm:yy
 8000840:	7dbb      	ldrb	r3, [r7, #22]
 8000842:	461a      	mov	r2, r3
 8000844:	7d7b      	ldrb	r3, [r7, #21]
 8000846:	4619      	mov	r1, r3
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	460b      	mov	r3, r1
 8000852:	4905      	ldr	r1, [pc, #20]	; (8000868 <get_time+0x70>)
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <get_time+0x78>)
 8000856:	f003 f81b 	bl	8003890 <siprintf>

}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000ec 	.word	0x200000ec
 8000868:	080040b4 	.word	0x080040b4
 800086c:	2000010c 	.word	0x2000010c
 8000870:	20000118 	.word	0x20000118

08000874 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800087c:	2120      	movs	r1, #32
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <HAL_RTC_AlarmAEventCallback+0x18>)
 8000880:	f000 fe13 	bl	80014aa <HAL_GPIO_TogglePin>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40020000 	.word	0x40020000

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fab8 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f82e 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 f914 	bl	8000ac8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008a0:	f000 f8be 	bl	8000a20 <MX_I2C1_Init>
  MX_RTC_Init();
 80008a4:	f000 f8ea 	bl	8000a7c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80008a8:	f7ff fee2 	bl	8000670 <lcd_init>

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)!=0x32F2)
 80008ac:	2101      	movs	r1, #1
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <main+0x5c>)
 80008b0:	f002 ff9a 	bl	80037e8 <HAL_RTCEx_BKUPRead>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d001      	beq.n	80008c2 <main+0x32>
	  set_time();
 80008be:	f7ff ff29 	bl	8000714 <set_time>

set_alarm();
 80008c2:	f7ff ff67 	bl	8000794 <set_alarm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 80008c6:	f7ff ff97 	bl	80007f8 <get_time>
	  lcd_send_cmd(0x80);
 80008ca:	2080      	movs	r0, #128	; 0x80
 80008cc:	f7ff fe70 	bl	80005b0 <lcd_send_cmd>
	  lcd_send_string(time);
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <main+0x60>)
 80008d2:	f7ff ff0a 	bl	80006ea <lcd_send_string>
	  lcd_send_cmd(0xC0);
 80008d6:	20c0      	movs	r0, #192	; 0xc0
 80008d8:	f7ff fe6a 	bl	80005b0 <lcd_send_cmd>
	  lcd_send_string(date);
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <main+0x64>)
 80008de:	f7ff ff04 	bl	80006ea <lcd_send_string>
	  HAL_Delay(100);
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f000 fb02 	bl	8000eec <HAL_Delay>
	  get_time();
 80008e8:	e7ed      	b.n	80008c6 <main+0x36>
 80008ea:	bf00      	nop
 80008ec:	200000ec 	.word	0x200000ec
 80008f0:	2000010c 	.word	0x2000010c
 80008f4:	20000118 	.word	0x20000118

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0ac      	sub	sp, #176	; 0xb0
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000902:	2234      	movs	r2, #52	; 0x34
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 ffba 	bl	8003880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	225c      	movs	r2, #92	; 0x5c
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f002 ffab 	bl	8003880 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <SystemClock_Config+0x120>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <SystemClock_Config+0x120>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <SystemClock_Config+0x120>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <SystemClock_Config+0x124>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a33      	ldr	r2, [pc, #204]	; (8000a1c <SystemClock_Config+0x124>)
 8000950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <SystemClock_Config+0x124>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000962:	2305      	movs	r3, #5
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800096e:	2301      	movs	r3, #1
 8000970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800097e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000982:	2304      	movs	r3, #4
 8000984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000988:	23b4      	movs	r3, #180	; 0xb4
 800098a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098e:	2302      	movs	r3, #2
 8000990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fffb 	bl	80029a0 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80009b0:	f000 f8e8 	bl	8000b84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009b4:	f001 f9d4 	bl	8001d60 <HAL_PWREx_EnableOverDrive>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009be:	f000 f8e1 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2302      	movs	r3, #2
 80009c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009de:	2105      	movs	r1, #5
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fa0d 	bl	8001e00 <HAL_RCC_ClockConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80009ec:	f000 f8ca 	bl	8000b84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009f0:	2320      	movs	r3, #32
 80009f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fb04 	bl	800200c <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000a0a:	f000 f8bb 	bl	8000b84 <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	37b0      	adds	r7, #176	; 0xb0
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_I2C1_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x58>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a5e:	f000 fd3f 	bl	80014e0 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 f88c 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000098 	.word	0x20000098
 8000a74:	40005400 	.word	0x40005400
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <MX_RTC_Init+0x48>)
 8000a84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000a8e:	227f      	movs	r2, #127	; 0x7f
 8000a90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_RTC_Init+0x44>)
 8000aac:	f002 f9d2 	bl	8002e54 <HAL_RTC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ab6:	f000 f865 	bl	8000b84 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000ec 	.word	0x200000ec
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_GPIO_Init+0xb4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2120      	movs	r1, #32
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000b54:	f000 fc90 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b58:	2320      	movs	r3, #32
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0xb8>)
 8000b70:	f000 faf0 	bl	8001154 <HAL_GPIO_Init>

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_I2C_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12c      	bne.n	8000c60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c28:	2312      	movs	r3, #18
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c34:	2304      	movs	r3, #4
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <HAL_I2C_MspInit+0x8c>)
 8000c40:	f000 fa88 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020400 	.word	0x40020400

08000c74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_RTC_MspInit+0x30>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10a      	bne.n	8000c9c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_RTC_MspInit+0x34>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2029      	movs	r0, #41	; 0x29
 8000c92:	f000 fa28 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c96:	2029      	movs	r0, #41	; 0x29
 8000c98:	f000 fa41 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40002800 	.word	0x40002800
 8000ca8:	42470e3c 	.word	0x42470e3c

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8d4 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <RTC_Alarm_IRQHandler+0x10>)
 8000d0e:	f002 fc7b 	bl	8003608 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000ec 	.word	0x200000ec

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f002 fd6e 	bl	800382c <__errno>
 8000d50:	4602      	mov	r2, r0
 8000d52:	230c      	movs	r3, #12
 8000d54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	2000008c 	.word	0x2000008c
 8000d84:	20000130 	.word	0x20000130

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <SystemInit+0x28>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <SystemInit+0x28>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SystemInit+0x28>)
 8000d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da2:	609a      	str	r2, [r3, #8]
#endif
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd3 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 fd29 	bl	8003838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fd53 	bl	8000890 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000df0:	08004120 	.word	0x08004120
  ldr  r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dfc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e00:	2000012c 	.word	0x2000012c

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f94d 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff feaa 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f965 	bl	800113a <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f92d 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000124 	.word	0x20000124

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000124 	.word	0x20000124

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_Delay+0x40>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e165      	b.n	800143c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 8154 	bne.w	8001436 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d00b      	beq.n	80011ae <HAL_GPIO_Init+0x5a>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a2:	2b11      	cmp	r3, #17
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0xfc>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b12      	cmp	r3, #18
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	69b9      	ldr	r1, [r7, #24]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80ae 	beq.w	8001436 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_GPIO_Init+0x2fc>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a5b      	ldr	r2, [pc, #364]	; (8001450 <HAL_GPIO_Init+0x2fc>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_GPIO_Init+0x2fc>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x300>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <HAL_GPIO_Init+0x304>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4d      	ldr	r2, [pc, #308]	; (800145c <HAL_GPIO_Init+0x308>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x216>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <HAL_GPIO_Init+0x30c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <HAL_GPIO_Init+0x310>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_GPIO_Init+0x314>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x20a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x318>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x206>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x31c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x202>
 8001352:	2306      	movs	r3, #6
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001356:	2307      	movs	r3, #7
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001380:	4934      	ldr	r1, [pc, #208]	; (8001454 <HAL_GPIO_Init+0x300>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013dc:	4a25      	ldr	r2, [pc, #148]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_GPIO_Init+0x320>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f ae96 	bls.w	8001170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40013c00 	.word	0x40013c00

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	401a      	ands	r2, r3
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d104      	bne.n	80014ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e11f      	b.n	8001732 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fb6c 	bl	8000be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2224      	movs	r2, #36	; 0x24
 8001510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001544:	f000 fd4e 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8001548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4a7b      	ldr	r2, [pc, #492]	; (800173c <HAL_I2C_Init+0x25c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d807      	bhi.n	8001564 <HAL_I2C_Init+0x84>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4a7a      	ldr	r2, [pc, #488]	; (8001740 <HAL_I2C_Init+0x260>)
 8001558:	4293      	cmp	r3, r2
 800155a:	bf94      	ite	ls
 800155c:	2301      	movls	r3, #1
 800155e:	2300      	movhi	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	e006      	b.n	8001572 <HAL_I2C_Init+0x92>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a77      	ldr	r2, [pc, #476]	; (8001744 <HAL_I2C_Init+0x264>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0db      	b.n	8001732 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a72      	ldr	r2, [pc, #456]	; (8001748 <HAL_I2C_Init+0x268>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9b      	lsrs	r3, r3, #18
 8001584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a64      	ldr	r2, [pc, #400]	; (800173c <HAL_I2C_Init+0x25c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d802      	bhi.n	80015b4 <HAL_I2C_Init+0xd4>
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3301      	adds	r3, #1
 80015b2:	e009      	b.n	80015c8 <HAL_I2C_Init+0xe8>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a63      	ldr	r2, [pc, #396]	; (800174c <HAL_I2C_Init+0x26c>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	3301      	adds	r3, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4956      	ldr	r1, [pc, #344]	; (800173c <HAL_I2C_Init+0x25c>)
 80015e4:	428b      	cmp	r3, r1
 80015e6:	d80d      	bhi.n	8001604 <HAL_I2C_Init+0x124>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e59      	subs	r1, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	bf38      	it	cc
 8001600:	2304      	movcc	r3, #4
 8001602:	e04f      	b.n	80016a4 <HAL_I2C_Init+0x1c4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_I2C_Init+0x150>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	440b      	add	r3, r1
 800161a:	fbb0 f3f3 	udiv	r3, r0, r3
 800161e:	3301      	adds	r3, #1
 8001620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	e012      	b.n	8001656 <HAL_I2C_Init+0x176>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e58      	subs	r0, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	0099      	lsls	r1, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_I2C_Init+0x17e>
 800165a:	2301      	movs	r3, #1
 800165c:	e022      	b.n	80016a4 <HAL_I2C_Init+0x1c4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10e      	bne.n	8001684 <HAL_I2C_Init+0x1a4>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1e58      	subs	r0, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	440b      	add	r3, r1
 8001674:	fbb0 f3f3 	udiv	r3, r0, r3
 8001678:	3301      	adds	r3, #1
 800167a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001682:	e00f      	b.n	80016a4 <HAL_I2C_Init+0x1c4>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1e58      	subs	r0, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	0099      	lsls	r1, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	6809      	ldr	r1, [r1, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6911      	ldr	r1, [r2, #16]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68d2      	ldr	r2, [r2, #12]
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	000186a0 	.word	0x000186a0
 8001740:	001e847f 	.word	0x001e847f
 8001744:	003d08ff 	.word	0x003d08ff
 8001748:	431bde83 	.word	0x431bde83
 800174c:	10624dd3 	.word	0x10624dd3

08001750 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	461a      	mov	r2, r3
 800175c:	460b      	mov	r3, r1
 800175e:	817b      	strh	r3, [r7, #10]
 8001760:	4613      	mov	r3, r2
 8001762:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff fbb6 	bl	8000ed4 <HAL_GetTick>
 8001768:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	f040 80e0 	bne.w	8001938 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2319      	movs	r3, #25
 800177e:	2201      	movs	r2, #1
 8001780:	4970      	ldr	r1, [pc, #448]	; (8001944 <HAL_I2C_Master_Transmit+0x1f4>)
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f964 	bl	8001a50 <I2C_WaitOnFlagUntilTimeout>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800178e:	2302      	movs	r3, #2
 8001790:	e0d3      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_I2C_Master_Transmit+0x50>
 800179c:	2302      	movs	r3, #2
 800179e:	e0cc      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d007      	beq.n	80017c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2221      	movs	r2, #33	; 0x21
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2210      	movs	r2, #16
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	893a      	ldrh	r2, [r7, #8]
 80017f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4a50      	ldr	r2, [pc, #320]	; (8001948 <HAL_I2C_Master_Transmit+0x1f8>)
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001808:	8979      	ldrh	r1, [r7, #10]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f89c 	bl	800194c <I2C_MasterRequestWrite>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e08d      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001834:	e066      	b.n	8001904 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f9de 	bl	8001bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2b04      	cmp	r3, #4
 800184c:	d107      	bne.n	800185e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800185c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b04      	cmp	r3, #4
 800189e:	d11b      	bne.n	80018d8 <HAL_I2C_Master_Transmit+0x188>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d017      	beq.n	80018d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	781a      	ldrb	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	6a39      	ldr	r1, [r7, #32]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f9ce 	bl	8001c7e <I2C_WaitOnBTFFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d107      	bne.n	8001900 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e01a      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	2b00      	cmp	r3, #0
 800190a:	d194      	bne.n	8001836 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
  }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	00100002 	.word	0x00100002
 8001948:	ffff0000 	.word	0xffff0000

0800194c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	460b      	mov	r3, r1
 800195a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b08      	cmp	r3, #8
 8001966:	d006      	beq.n	8001976 <I2C_MasterRequestWrite+0x2a>
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d003      	beq.n	8001976 <I2C_MasterRequestWrite+0x2a>
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001974:	d108      	bne.n	8001988 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e00b      	b.n	80019a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	2b12      	cmp	r3, #18
 800198e:	d107      	bne.n	80019a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800199e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f84f 	bl	8001a50 <I2C_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00c      	beq.n	80019d2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e035      	b.n	8001a3e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019da:	d108      	bne.n	80019ee <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	e01b      	b.n	8001a26 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019ee:	897b      	ldrh	r3, [r7, #10]
 80019f0:	11db      	asrs	r3, r3, #7
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f003 0306 	and.w	r3, r3, #6
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f063 030f 	orn	r3, r3, #15
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	490f      	ldr	r1, [pc, #60]	; (8001a48 <I2C_MasterRequestWrite+0xfc>)
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f876 	bl	8001afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e010      	b.n	8001a3e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a1c:	897b      	ldrh	r3, [r7, #10]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <I2C_MasterRequestWrite+0x100>)
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f866 	bl	8001afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	00010008 	.word	0x00010008
 8001a4c:	00010002 	.word	0x00010002

08001a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a60:	e025      	b.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d021      	beq.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6a:	f7ff fa33 	bl	8000ed4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d302      	bcc.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d116      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f043 0220 	orr.w	r2, r3, #32
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e023      	b.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10d      	bne.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	e00c      	b.n	8001aee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d0b6      	beq.n	8001a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b0c:	e051      	b.n	8001bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d123      	bne.n	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f043 0204 	orr.w	r2, r3, #4
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e046      	b.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d021      	beq.n	8001bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6e:	f7ff f9b1 	bl	8000ed4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d302      	bcc.n	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d116      	bne.n	8001bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0220 	orr.w	r2, r3, #32
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e020      	b.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10c      	bne.n	8001bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf14      	ite	ne
 8001bce:	2301      	movne	r3, #1
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	e00b      	b.n	8001bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4013      	ands	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d18d      	bne.n	8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c08:	e02d      	b.n	8001c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f878 	bl	8001d00 <I2C_IsAcknowledgeFailed>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e02d      	b.n	8001c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d021      	beq.n	8001c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c22:	f7ff f957 	bl	8000ed4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d302      	bcc.n	8001c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d116      	bne.n	8001c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f043 0220 	orr.w	r2, r3, #32
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e007      	b.n	8001c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b80      	cmp	r3, #128	; 0x80
 8001c72:	d1ca      	bne.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c8a:	e02d      	b.n	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f837 	bl	8001d00 <I2C_IsAcknowledgeFailed>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e02d      	b.n	8001cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d021      	beq.n	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca4:	f7ff f916 	bl	8000ed4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d302      	bcc.n	8001cba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e007      	b.n	8001cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d1ca      	bne.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d16:	d11b      	bne.n	8001d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8c:	f7ff f8a2 	bl	8000ed4 <HAL_GetTick>
 8001d90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d92:	e009      	b.n	8001da8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d94:	f7ff f89e 	bl	8000ed4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da2:	d901      	bls.n	8001da8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e01f      	b.n	8001de8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d1ee      	bne.n	8001d94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff f88a 	bl	8000ed4 <HAL_GetTick>
 8001dc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dc2:	e009      	b.n	8001dd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dc4:	f7ff f886 	bl	8000ed4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd2:	d901      	bls.n	8001dd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e007      	b.n	8001de8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001de4:	d1ee      	bne.n	8001dc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	420e0040 	.word	0x420e0040
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	420e0044 	.word	0x420e0044

08001e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0cc      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e14:	4b68      	ldr	r3, [pc, #416]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d90c      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b8      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a58      	ldr	r2, [pc, #352]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	494d      	ldr	r1, [pc, #308]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d044      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d119      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ece:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e067      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 0203 	bic.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4934      	ldr	r1, [pc, #208]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef0:	f7fe fff0 	bl	8000ed4 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7fe ffec 	bl	8000ed4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e04f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 020c 	and.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1eb      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d20c      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e032      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4916      	ldr	r1, [pc, #88]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	490e      	ldr	r1, [pc, #56]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f86:	f000 fb6b 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe ff50 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	080040c4 	.word	0x080040c4
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4601      	mov	r1, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4a03      	ldr	r2, [pc, #12]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	080040d4 	.word	0x080040d4

0800200c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d010      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002044:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	496c      	ldr	r1, [pc, #432]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002062:	2301      	movs	r3, #1
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002078:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	4960      	ldr	r1, [pc, #384]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a0:	4b58      	ldr	r3, [pc, #352]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4955      	ldr	r1, [pc, #340]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020be:	d101      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80020c0:	2301      	movs	r3, #1
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80020cc:	2301      	movs	r3, #1
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d017      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	4946      	ldr	r1, [pc, #280]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d101      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002108:	2301      	movs	r3, #1
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 808a 	beq.w	800222e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a38      	ldr	r2, [pc, #224]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a33      	ldr	r2, [pc, #204]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002142:	f7fe fec7 	bl	8000ed4 <HAL_GetTick>
 8002146:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe fec3 	bl	8000ed4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e278      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800215c:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002170:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02f      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	429a      	cmp	r2, r3
 8002184:	d028      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d114      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fe91 	bl	8000ed4 <HAL_GetTick>
 80021b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fe8d 	bl	8000ed4 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e240      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021e4:	d114      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80021f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fa:	4902      	ldr	r1, [pc, #8]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]
 8002200:	e00c      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40007000 	.word	0x40007000
 800220c:	42470e40 	.word	0x42470e40
 8002210:	4b4a      	ldr	r3, [pc, #296]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a49      	ldr	r2, [pc, #292]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002216:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800221a:	6093      	str	r3, [r2, #8]
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800221e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	4944      	ldr	r1, [pc, #272]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800222a:	4313      	orrs	r3, r2
 800222c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002242:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002250:	4b3a      	ldr	r3, [pc, #232]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002256:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4937      	ldr	r1, [pc, #220]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002278:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	492e      	ldr	r1, [pc, #184]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d011      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	4926      	ldr	r1, [pc, #152]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b2:	d101      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	491a      	ldr	r1, [pc, #104]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f4:	4911      	ldr	r1, [pc, #68]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002306:	2301      	movs	r3, #1
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d005      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002318:	f040 80ff 	bne.w	800251a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002322:	f7fe fdd7 	bl	8000ed4 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002328:	e00e      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800232a:	f7fe fdd3 	bl	8000ed4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d907      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e188      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800233c:	40023800 	.word	0x40023800
 8002340:	424711e0 	.word	0x424711e0
 8002344:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002348:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ea      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002370:	2b00      	cmp	r3, #0
 8002372:	d028      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d124      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800237c:	4b71      	ldr	r3, [pc, #452]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	3301      	adds	r3, #1
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800238e:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002394:	0e1b      	lsrs	r3, r3, #24
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	431a      	orrs	r2, r3
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	3b01      	subs	r3, #1
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	431a      	orrs	r2, r3
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	071b      	lsls	r3, r3, #28
 80023be:	4961      	ldr	r1, [pc, #388]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d035      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f0:	d130      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240a:	0f1b      	lsrs	r3, r3, #28
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	431a      	orrs	r2, r3
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	431a      	orrs	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	071b      	lsls	r3, r3, #28
 8002434:	4943      	ldr	r1, [pc, #268]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002442:	f023 021f 	bic.w	r2, r3, #31
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	493d      	ldr	r1, [pc, #244]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d029      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002468:	d124      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800246c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800247e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002482:	0f1b      	lsrs	r3, r3, #28
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	019b      	lsls	r3, r3, #6
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	3b01      	subs	r3, #1
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	431a      	orrs	r2, r3
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	431a      	orrs	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	071b      	lsls	r3, r3, #28
 80024ac:	4925      	ldr	r1, [pc, #148]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d016      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	4917      	ldr	r1, [pc, #92]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fcee 	bl	8000ed4 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024fc:	f7fe fcea 	bl	8000ed4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e09f      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	2b01      	cmp	r3, #1
 800251e:	f040 8095 	bne.w	800264c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe fcd4 	bl	8000ed4 <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800252e:	e00f      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002530:	f7fe fcd0 	bl	8000ed4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d908      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e085      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	42470068 	.word	0x42470068
 800254c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002550:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800255c:	d0e8      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02b      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002582:	2b00      	cmp	r3, #0
 8002584:	d127      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	431a      	orrs	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	3b01      	subs	r3, #1
 80025aa:	041b      	lsls	r3, r3, #16
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	4928      	ldr	r1, [pc, #160]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025bc:	4b26      	ldr	r3, [pc, #152]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	3b01      	subs	r3, #1
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01d      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ea:	d118      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	0e1b      	lsrs	r3, r3, #24
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	019b      	lsls	r3, r3, #6
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	3b01      	subs	r3, #1
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	4910      	ldr	r1, [pc, #64]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002624:	f7fe fc56 	bl	8000ed4 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800262c:	f7fe fc52 	bl	8000ed4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e007      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800264a:	d1ef      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3730      	adds	r7, #48	; 0x30
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	42470070 	.word	0x42470070

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267a:	4bc6      	ldr	r3, [pc, #792]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b0c      	cmp	r3, #12
 8002684:	f200 817e 	bhi.w	8002984 <HAL_RCC_GetSysClockFreq+0x324>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_RCC_GetSysClockFreq+0x30>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026c5 	.word	0x080026c5
 8002694:	08002985 	.word	0x08002985
 8002698:	08002985 	.word	0x08002985
 800269c:	08002985 	.word	0x08002985
 80026a0:	080026cb 	.word	0x080026cb
 80026a4:	08002985 	.word	0x08002985
 80026a8:	08002985 	.word	0x08002985
 80026ac:	08002985 	.word	0x08002985
 80026b0:	080026d1 	.word	0x080026d1
 80026b4:	08002985 	.word	0x08002985
 80026b8:	08002985 	.word	0x08002985
 80026bc:	08002985 	.word	0x08002985
 80026c0:	0800282d 	.word	0x0800282d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4bb4      	ldr	r3, [pc, #720]	; (8002998 <HAL_RCC_GetSysClockFreq+0x338>)
 80026c6:	613b      	str	r3, [r7, #16]
       break;
 80026c8:	e15f      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4bb4      	ldr	r3, [pc, #720]	; (800299c <HAL_RCC_GetSysClockFreq+0x33c>)
 80026cc:	613b      	str	r3, [r7, #16]
      break;
 80026ce:	e15c      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4bb0      	ldr	r3, [pc, #704]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4bae      	ldr	r3, [pc, #696]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04a      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4bab      	ldr	r3, [pc, #684]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	f04f 0400 	mov.w	r4, #0
 80026f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	ea03 0501 	and.w	r5, r3, r1
 80026fc:	ea04 0602 	and.w	r6, r4, r2
 8002700:	4629      	mov	r1, r5
 8002702:	4632      	mov	r2, r6
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	f04f 0400 	mov.w	r4, #0
 800270c:	0154      	lsls	r4, r2, #5
 800270e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002712:	014b      	lsls	r3, r1, #5
 8002714:	4619      	mov	r1, r3
 8002716:	4622      	mov	r2, r4
 8002718:	1b49      	subs	r1, r1, r5
 800271a:	eb62 0206 	sbc.w	r2, r2, r6
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	f04f 0400 	mov.w	r4, #0
 8002726:	0194      	lsls	r4, r2, #6
 8002728:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800272c:	018b      	lsls	r3, r1, #6
 800272e:	1a5b      	subs	r3, r3, r1
 8002730:	eb64 0402 	sbc.w	r4, r4, r2
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	00e2      	lsls	r2, r4, #3
 800273e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002742:	00d9      	lsls	r1, r3, #3
 8002744:	460b      	mov	r3, r1
 8002746:	4614      	mov	r4, r2
 8002748:	195b      	adds	r3, r3, r5
 800274a:	eb44 0406 	adc.w	r4, r4, r6
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	0262      	lsls	r2, r4, #9
 8002758:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800275c:	0259      	lsls	r1, r3, #9
 800275e:	460b      	mov	r3, r1
 8002760:	4614      	mov	r4, r2
 8002762:	4618      	mov	r0, r3
 8002764:	4621      	mov	r1, r4
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0400 	mov.w	r4, #0
 800276c:	461a      	mov	r2, r3
 800276e:	4623      	mov	r3, r4
 8002770:	f7fd fd9e 	bl	80002b0 <__aeabi_uldivmod>
 8002774:	4603      	mov	r3, r0
 8002776:	460c      	mov	r4, r1
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e049      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277c:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	f04f 0400 	mov.w	r4, #0
 8002786:	f240 11ff 	movw	r1, #511	; 0x1ff
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	ea03 0501 	and.w	r5, r3, r1
 8002792:	ea04 0602 	and.w	r6, r4, r2
 8002796:	4629      	mov	r1, r5
 8002798:	4632      	mov	r2, r6
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	f04f 0400 	mov.w	r4, #0
 80027a2:	0154      	lsls	r4, r2, #5
 80027a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027a8:	014b      	lsls	r3, r1, #5
 80027aa:	4619      	mov	r1, r3
 80027ac:	4622      	mov	r2, r4
 80027ae:	1b49      	subs	r1, r1, r5
 80027b0:	eb62 0206 	sbc.w	r2, r2, r6
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	f04f 0400 	mov.w	r4, #0
 80027bc:	0194      	lsls	r4, r2, #6
 80027be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027c2:	018b      	lsls	r3, r1, #6
 80027c4:	1a5b      	subs	r3, r3, r1
 80027c6:	eb64 0402 	sbc.w	r4, r4, r2
 80027ca:	f04f 0100 	mov.w	r1, #0
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	00e2      	lsls	r2, r4, #3
 80027d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027d8:	00d9      	lsls	r1, r3, #3
 80027da:	460b      	mov	r3, r1
 80027dc:	4614      	mov	r4, r2
 80027de:	195b      	adds	r3, r3, r5
 80027e0:	eb44 0406 	adc.w	r4, r4, r6
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	02a2      	lsls	r2, r4, #10
 80027ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027f2:	0299      	lsls	r1, r3, #10
 80027f4:	460b      	mov	r3, r1
 80027f6:	4614      	mov	r4, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	4621      	mov	r1, r4
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f04f 0400 	mov.w	r4, #0
 8002802:	461a      	mov	r2, r3
 8002804:	4623      	mov	r3, r4
 8002806:	f7fd fd53 	bl	80002b0 <__aeabi_uldivmod>
 800280a:	4603      	mov	r3, r0
 800280c:	460c      	mov	r4, r1
 800280e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002810:	4b60      	ldr	r3, [pc, #384]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	613b      	str	r3, [r7, #16]
      break;
 800282a:	e0ae      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002834:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002836:	4b57      	ldr	r3, [pc, #348]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d04a      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	f04f 0400 	mov.w	r4, #0
 800284c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	ea03 0501 	and.w	r5, r3, r1
 8002858:	ea04 0602 	and.w	r6, r4, r2
 800285c:	4629      	mov	r1, r5
 800285e:	4632      	mov	r2, r6
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	f04f 0400 	mov.w	r4, #0
 8002868:	0154      	lsls	r4, r2, #5
 800286a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800286e:	014b      	lsls	r3, r1, #5
 8002870:	4619      	mov	r1, r3
 8002872:	4622      	mov	r2, r4
 8002874:	1b49      	subs	r1, r1, r5
 8002876:	eb62 0206 	sbc.w	r2, r2, r6
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f04f 0400 	mov.w	r4, #0
 8002882:	0194      	lsls	r4, r2, #6
 8002884:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002888:	018b      	lsls	r3, r1, #6
 800288a:	1a5b      	subs	r3, r3, r1
 800288c:	eb64 0402 	sbc.w	r4, r4, r2
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	00e2      	lsls	r2, r4, #3
 800289a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800289e:	00d9      	lsls	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	4614      	mov	r4, r2
 80028a4:	195b      	adds	r3, r3, r5
 80028a6:	eb44 0406 	adc.w	r4, r4, r6
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	0262      	lsls	r2, r4, #9
 80028b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028b8:	0259      	lsls	r1, r3, #9
 80028ba:	460b      	mov	r3, r1
 80028bc:	4614      	mov	r4, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	4621      	mov	r1, r4
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	f7fd fcf0 	bl	80002b0 <__aeabi_uldivmod>
 80028d0:	4603      	mov	r3, r0
 80028d2:	460c      	mov	r4, r1
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e049      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	ea03 0501 	and.w	r5, r3, r1
 80028ee:	ea04 0602 	and.w	r6, r4, r2
 80028f2:	4629      	mov	r1, r5
 80028f4:	4632      	mov	r2, r6
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	f04f 0400 	mov.w	r4, #0
 80028fe:	0154      	lsls	r4, r2, #5
 8002900:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002904:	014b      	lsls	r3, r1, #5
 8002906:	4619      	mov	r1, r3
 8002908:	4622      	mov	r2, r4
 800290a:	1b49      	subs	r1, r1, r5
 800290c:	eb62 0206 	sbc.w	r2, r2, r6
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f04f 0400 	mov.w	r4, #0
 8002918:	0194      	lsls	r4, r2, #6
 800291a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	1a5b      	subs	r3, r3, r1
 8002922:	eb64 0402 	sbc.w	r4, r4, r2
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	00e2      	lsls	r2, r4, #3
 8002930:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002934:	00d9      	lsls	r1, r3, #3
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	195b      	adds	r3, r3, r5
 800293c:	eb44 0406 	adc.w	r4, r4, r6
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	02a2      	lsls	r2, r4, #10
 800294a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800294e:	0299      	lsls	r1, r3, #10
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	4618      	mov	r0, r3
 8002956:	4621      	mov	r1, r4
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	461a      	mov	r2, r3
 8002960:	4623      	mov	r3, r4
 8002962:	f7fd fca5 	bl	80002b0 <__aeabi_uldivmod>
 8002966:	4603      	mov	r3, r0
 8002968:	460c      	mov	r4, r1
 800296a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_GetSysClockFreq+0x334>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0f1b      	lsrs	r3, r3, #28
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_RCC_GetSysClockFreq+0x338>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	693b      	ldr	r3, [r7, #16]
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	00f42400 	.word	0x00f42400
 800299c:	007a1200 	.word	0x007a1200

080029a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8083 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029ba:	4b95      	ldr	r3, [pc, #596]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c6:	4b92      	ldr	r3, [pc, #584]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d2:	4b8f      	ldr	r3, [pc, #572]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029de:	d00c      	beq.n	80029fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e0:	4b8b      	ldr	r3, [pc, #556]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d112      	bne.n	8002a12 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	4b85      	ldr	r3, [pc, #532]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d05b      	beq.n	8002abe <HAL_RCC_OscConfig+0x11e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d157      	bne.n	8002abe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e216      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x8a>
 8002a1c:	4b7c      	ldr	r3, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a7b      	ldr	r2, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e01d      	b.n	8002a66 <HAL_RCC_OscConfig+0xc6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0xae>
 8002a34:	4b76      	ldr	r3, [pc, #472]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a75      	ldr	r2, [pc, #468]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e00b      	b.n	8002a66 <HAL_RCC_OscConfig+0xc6>
 8002a4e:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6f      	ldr	r2, [pc, #444]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6c      	ldr	r2, [pc, #432]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d013      	beq.n	8002a96 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fa31 	bl	8000ed4 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a76:	f7fe fa2d 	bl	8000ed4 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1db      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a88:	4b61      	ldr	r3, [pc, #388]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0xd6>
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fa1d 	bl	8000ed4 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fa19 	bl	8000ed4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1c7      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab0:	4b57      	ldr	r3, [pc, #348]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0xfe>
 8002abc:	e000      	b.n	8002ac0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d06f      	beq.n	8002bac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ad8:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af0:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d11c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d116      	bne.n	8002b36 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b08:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_OscConfig+0x180>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e18f      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4938      	ldr	r1, [pc, #224]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b34:	e03a      	b.n	8002bac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d020      	beq.n	8002b80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3e:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_RCC_OscConfig+0x274>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe f9c6 	bl	8000ed4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe f9c2 	bl	8000ed4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e170      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4925      	ldr	r1, [pc, #148]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
 8002b7e:	e015      	b.n	8002bac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0x274>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe f9a5 	bl	8000ed4 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fe f9a1 	bl	8000ed4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e14f      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d037      	beq.n	8002c28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x278>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7fe f985 	bl	8000ed4 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bce:	f7fe f981 	bl	8000ed4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e12f      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x22e>
 8002bec:	e01c      	b.n	8002c28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x278>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe f96e 	bl	8000ed4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe f96a 	bl	8000ed4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d908      	bls.n	8002c1c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e118      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470000 	.word	0x42470000
 8002c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b8a      	ldr	r3, [pc, #552]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e9      	bne.n	8002bfc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8097 	beq.w	8002d64 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b83      	ldr	r3, [pc, #524]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a7e      	ldr	r2, [pc, #504]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b7c      	ldr	r3, [pc, #496]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a75      	ldr	r2, [pc, #468]	; (8002e4c <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f929 	bl	8000ed4 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fe f925 	bl	8000ed4 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0d3      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b6c      	ldr	r3, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x31a>
 8002cac:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a65      	ldr	r2, [pc, #404]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x354>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x33c>
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a60      	ldr	r2, [pc, #384]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a5d      	ldr	r2, [pc, #372]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x354>
 8002cdc:	4b5a      	ldr	r3, [pc, #360]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a59      	ldr	r2, [pc, #356]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce8:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a56      	ldr	r2, [pc, #344]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe f8ea 	bl	8000ed4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe f8e6 	bl	8000ed4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e092      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ee      	beq.n	8002d04 <HAL_RCC_OscConfig+0x364>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f8d4 	bl	8000ed4 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe f8d0 	bl	8000ed4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e07c      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	4b40      	ldr	r3, [pc, #256]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ee      	bne.n	8002d30 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d068      	beq.n	8002e3e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d060      	beq.n	8002e3a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d145      	bne.n	8002e0c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d80:	4b33      	ldr	r3, [pc, #204]	; (8002e50 <HAL_RCC_OscConfig+0x4b0>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe f8a5 	bl	8000ed4 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe f8a1 	bl	8000ed4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e04f      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	019b      	lsls	r3, r3, #6
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	071b      	lsls	r3, r3, #28
 8002dd8:	491b      	ldr	r1, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_RCC_OscConfig+0x4b0>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe f876 	bl	8000ed4 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe f872 	bl	8000ed4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e020      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x44c>
 8002e0a:	e018      	b.n	8002e3e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_RCC_OscConfig+0x4b0>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe f85f 	bl	8000ed4 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe f85b 	bl	8000ed4 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e009      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_RCC_OscConfig+0x4a8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x47a>
 8002e38:	e001      	b.n	8002e3e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	42470060 	.word	0x42470060

08002e54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e083      	b.n	8002f6e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7f5b      	ldrb	r3, [r3, #29]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fefc 	bl	8000c74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	22ca      	movs	r2, #202	; 0xca
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2253      	movs	r2, #83	; 0x53
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fc26 	bl	80036e4 <RTC_EnterInitMode>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e05e      	b.n	8002f6e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68d2      	ldr	r2, [r2, #12]
 8002eea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6919      	ldr	r1, [r3, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10e      	bne.n	8002f3c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fbb8 	bl	8003694 <HAL_RTC_WaitForSynchro>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	22ff      	movs	r2, #255	; 0xff
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e018      	b.n	8002f6e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	22ff      	movs	r2, #255	; 0xff
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f76:	b590      	push	{r4, r7, lr}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	7f1b      	ldrb	r3, [r3, #28]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_RTC_SetTime+0x1c>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0aa      	b.n	80030e8 <HAL_RTC_SetTime+0x172>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d126      	bne.n	8002ff2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fbbd 	bl	800373c <RTC_ByteToBcd2>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fbb6 	bl	800373c <RTC_ByteToBcd2>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fd4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	789b      	ldrb	r3, [r3, #2]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fbae 	bl	800373c <RTC_ByteToBcd2>
 8002fe0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fe2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	78db      	ldrb	r3, [r3, #3]
 8002fea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e018      	b.n	8003024 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003012:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003018:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	78db      	ldrb	r3, [r3, #3]
 800301e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	22ca      	movs	r2, #202	; 0xca
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2253      	movs	r2, #83	; 0x53
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fb55 	bl	80036e4 <RTC_EnterInitMode>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2204      	movs	r2, #4
 800304c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e047      	b.n	80030e8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003062:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003076:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	431a      	orrs	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d111      	bne.n	80030d2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 faf0 	bl	8003694 <HAL_RTC_WaitForSynchro>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2204      	movs	r2, #4
 80030c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00a      	b.n	80030e8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80030e6:	2300      	movs	r3, #0
  }
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}

080030f0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003122:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003126:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d11a      	bne.n	80031a2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fb01 	bl	8003778 <RTC_Bcd2ToByte>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 faf8 	bl	8003778 <RTC_Bcd2ToByte>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	789b      	ldrb	r3, [r3, #2]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 faef 	bl	8003778 <RTC_Bcd2ToByte>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	7f1b      	ldrb	r3, [r3, #28]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_RTC_SetDate+0x1c>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e094      	b.n	80032f2 <HAL_RTC_SetDate+0x146>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2202      	movs	r2, #2
 80031d2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10e      	bne.n	80031f8 <HAL_RTC_SetDate+0x4c>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	f023 0310 	bic.w	r3, r3, #16
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	330a      	adds	r3, #10
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11c      	bne.n	8003238 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	78db      	ldrb	r3, [r3, #3]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fa9a 	bl	800373c <RTC_ByteToBcd2>
 8003208:	4603      	mov	r3, r0
 800320a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fa93 	bl	800373c <RTC_ByteToBcd2>
 8003216:	4603      	mov	r3, r0
 8003218:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800321a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	789b      	ldrb	r3, [r3, #2]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fa8b 	bl	800373c <RTC_ByteToBcd2>
 8003226:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003228:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e00e      	b.n	8003256 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003244:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800324a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	22ca      	movs	r2, #202	; 0xca
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2253      	movs	r2, #83	; 0x53
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fa3c 	bl	80036e4 <RTC_EnterInitMode>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	22ff      	movs	r2, #255	; 0xff
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2204      	movs	r2, #4
 800327e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e033      	b.n	80032f2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003294:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003298:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d111      	bne.n	80032dc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f9eb 	bl	8003694 <HAL_RTC_WaitForSynchro>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2204      	movs	r2, #4
 80032d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e00a      	b.n	80032f2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}

080032fa <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003314:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003318:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0b5b      	lsrs	r3, r3, #13
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11a      	bne.n	800338e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	78db      	ldrb	r3, [r3, #3]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fa0b 	bl	8003778 <RTC_Bcd2ToByte>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa02 	bl	8003778 <RTC_Bcd2ToByte>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	789b      	ldrb	r3, [r3, #2]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f9f9 	bl	8003778 <RTC_Bcd2ToByte>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80033ac:	4b93      	ldr	r3, [pc, #588]	; (80035fc <HAL_RTC_SetAlarm_IT+0x264>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a93      	ldr	r2, [pc, #588]	; (8003600 <HAL_RTC_SetAlarm_IT+0x268>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	7f1b      	ldrb	r3, [r3, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_RTC_SetAlarm_IT+0x36>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e111      	b.n	80035f2 <HAL_RTC_SetAlarm_IT+0x25a>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2202      	movs	r2, #2
 80033d8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d137      	bne.n	8003450 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2200      	movs	r2, #0
 80033f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f99f 	bl	800373c <RTC_ByteToBcd2>
 80033fe:	4603      	mov	r3, r0
 8003400:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	785b      	ldrb	r3, [r3, #1]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f998 	bl	800373c <RTC_ByteToBcd2>
 800340c:	4603      	mov	r3, r0
 800340e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003410:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	789b      	ldrb	r3, [r3, #2]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f990 	bl	800373c <RTC_ByteToBcd2>
 800341c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800341e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	78db      	ldrb	r3, [r3, #3]
 8003426:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003428:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f982 	bl	800373c <RTC_ByteToBcd2>
 8003438:	4603      	mov	r3, r0
 800343a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800343c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003444:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800344a:	4313      	orrs	r3, r2
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e023      	b.n	8003498 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2200      	movs	r2, #0
 8003462:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003470:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003476:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	78db      	ldrb	r3, [r3, #3]
 800347c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800347e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003486:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003488:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800348e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003494:	4313      	orrs	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	22ca      	movs	r2, #202	; 0xca
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2253      	movs	r2, #83	; 0x53
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d141      	bne.n	8003542 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034cc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80034de:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	617a      	str	r2, [r7, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2203      	movs	r2, #3
 80034f6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e077      	b.n	80035f2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0e7      	beq.n	80034e0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	e040      	b.n	80035c4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003550:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003562:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	617a      	str	r2, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2203      	movs	r2, #3
 800357a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e035      	b.n	80035f2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0e7      	beq.n	8003564 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ce:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035da:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	22ff      	movs	r2, #255	; 0xff
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3724      	adds	r7, #36	; 0x24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000000 	.word	0x20000000
 8003600:	10624dd3 	.word	0x10624dd3
 8003604:	40013c00 	.word	0x40013c00

08003608 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fd f921 	bl	8000874 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003642:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f8d9 	bl	8003818 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003676:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RTC_AlarmIRQHandler+0x88>)
 800367a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800367e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	775a      	strb	r2, [r3, #29]
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40013c00 	.word	0x40013c00

08003694 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036b0:	f7fd fc10 	bl	8000ed4 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036b6:	e009      	b.n	80036cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036b8:	f7fd fc0c 	bl	8000ed4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c6:	d901      	bls.n	80036cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e007      	b.n	80036dc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ee      	beq.n	80036b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d119      	bne.n	8003732 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f04f 32ff 	mov.w	r2, #4294967295
 8003706:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003708:	f7fd fbe4 	bl	8000ed4 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800370e:	e009      	b.n	8003724 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003710:	f7fd fbe0 	bl	8000ed4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800371e:	d901      	bls.n	8003724 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e007      	b.n	8003734 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ee      	beq.n	8003710 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800374a:	e005      	b.n	8003758 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	3b0a      	subs	r3, #10
 8003756:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	2b09      	cmp	r3, #9
 800375c:	d8f6      	bhi.n	800374c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	b2da      	uxtb	r2, r3
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	4313      	orrs	r3, r2
 800376a:	b2db      	uxtb	r3, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	b2db      	uxtb	r3, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3350      	adds	r3, #80	; 0x50
 80037ca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4413      	add	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	601a      	str	r2, [r3, #0]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3350      	adds	r3, #80	; 0x50
 80037fc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <__errno>:
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <__errno+0x8>)
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	2000000c 	.word	0x2000000c

08003838 <__libc_init_array>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	4e0d      	ldr	r6, [pc, #52]	; (8003870 <__libc_init_array+0x38>)
 800383c:	4c0d      	ldr	r4, [pc, #52]	; (8003874 <__libc_init_array+0x3c>)
 800383e:	1ba4      	subs	r4, r4, r6
 8003840:	10a4      	asrs	r4, r4, #2
 8003842:	2500      	movs	r5, #0
 8003844:	42a5      	cmp	r5, r4
 8003846:	d109      	bne.n	800385c <__libc_init_array+0x24>
 8003848:	4e0b      	ldr	r6, [pc, #44]	; (8003878 <__libc_init_array+0x40>)
 800384a:	4c0c      	ldr	r4, [pc, #48]	; (800387c <__libc_init_array+0x44>)
 800384c:	f000 fc26 	bl	800409c <_init>
 8003850:	1ba4      	subs	r4, r4, r6
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	2500      	movs	r5, #0
 8003856:	42a5      	cmp	r5, r4
 8003858:	d105      	bne.n	8003866 <__libc_init_array+0x2e>
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003860:	4798      	blx	r3
 8003862:	3501      	adds	r5, #1
 8003864:	e7ee      	b.n	8003844 <__libc_init_array+0xc>
 8003866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800386a:	4798      	blx	r3
 800386c:	3501      	adds	r5, #1
 800386e:	e7f2      	b.n	8003856 <__libc_init_array+0x1e>
 8003870:	08004118 	.word	0x08004118
 8003874:	08004118 	.word	0x08004118
 8003878:	08004118 	.word	0x08004118
 800387c:	0800411c 	.word	0x0800411c

08003880 <memset>:
 8003880:	4402      	add	r2, r0
 8003882:	4603      	mov	r3, r0
 8003884:	4293      	cmp	r3, r2
 8003886:	d100      	bne.n	800388a <memset+0xa>
 8003888:	4770      	bx	lr
 800388a:	f803 1b01 	strb.w	r1, [r3], #1
 800388e:	e7f9      	b.n	8003884 <memset+0x4>

08003890 <siprintf>:
 8003890:	b40e      	push	{r1, r2, r3}
 8003892:	b500      	push	{lr}
 8003894:	b09c      	sub	sp, #112	; 0x70
 8003896:	ab1d      	add	r3, sp, #116	; 0x74
 8003898:	9002      	str	r0, [sp, #8]
 800389a:	9006      	str	r0, [sp, #24]
 800389c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038a0:	4809      	ldr	r0, [pc, #36]	; (80038c8 <siprintf+0x38>)
 80038a2:	9107      	str	r1, [sp, #28]
 80038a4:	9104      	str	r1, [sp, #16]
 80038a6:	4909      	ldr	r1, [pc, #36]	; (80038cc <siprintf+0x3c>)
 80038a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80038ac:	9105      	str	r1, [sp, #20]
 80038ae:	6800      	ldr	r0, [r0, #0]
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	a902      	add	r1, sp, #8
 80038b4:	f000 f866 	bl	8003984 <_svfiprintf_r>
 80038b8:	9b02      	ldr	r3, [sp, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	b01c      	add	sp, #112	; 0x70
 80038c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c4:	b003      	add	sp, #12
 80038c6:	4770      	bx	lr
 80038c8:	2000000c 	.word	0x2000000c
 80038cc:	ffff0208 	.word	0xffff0208

080038d0 <__ssputs_r>:
 80038d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d4:	688e      	ldr	r6, [r1, #8]
 80038d6:	429e      	cmp	r6, r3
 80038d8:	4682      	mov	sl, r0
 80038da:	460c      	mov	r4, r1
 80038dc:	4690      	mov	r8, r2
 80038de:	4699      	mov	r9, r3
 80038e0:	d837      	bhi.n	8003952 <__ssputs_r+0x82>
 80038e2:	898a      	ldrh	r2, [r1, #12]
 80038e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038e8:	d031      	beq.n	800394e <__ssputs_r+0x7e>
 80038ea:	6825      	ldr	r5, [r4, #0]
 80038ec:	6909      	ldr	r1, [r1, #16]
 80038ee:	1a6f      	subs	r7, r5, r1
 80038f0:	6965      	ldr	r5, [r4, #20]
 80038f2:	2302      	movs	r3, #2
 80038f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80038fc:	f109 0301 	add.w	r3, r9, #1
 8003900:	443b      	add	r3, r7
 8003902:	429d      	cmp	r5, r3
 8003904:	bf38      	it	cc
 8003906:	461d      	movcc	r5, r3
 8003908:	0553      	lsls	r3, r2, #21
 800390a:	d530      	bpl.n	800396e <__ssputs_r+0x9e>
 800390c:	4629      	mov	r1, r5
 800390e:	f000 fb2b 	bl	8003f68 <_malloc_r>
 8003912:	4606      	mov	r6, r0
 8003914:	b950      	cbnz	r0, 800392c <__ssputs_r+0x5c>
 8003916:	230c      	movs	r3, #12
 8003918:	f8ca 3000 	str.w	r3, [sl]
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392c:	463a      	mov	r2, r7
 800392e:	6921      	ldr	r1, [r4, #16]
 8003930:	f000 faa8 	bl	8003e84 <memcpy>
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800393a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	6126      	str	r6, [r4, #16]
 8003942:	6165      	str	r5, [r4, #20]
 8003944:	443e      	add	r6, r7
 8003946:	1bed      	subs	r5, r5, r7
 8003948:	6026      	str	r6, [r4, #0]
 800394a:	60a5      	str	r5, [r4, #8]
 800394c:	464e      	mov	r6, r9
 800394e:	454e      	cmp	r6, r9
 8003950:	d900      	bls.n	8003954 <__ssputs_r+0x84>
 8003952:	464e      	mov	r6, r9
 8003954:	4632      	mov	r2, r6
 8003956:	4641      	mov	r1, r8
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	f000 fa9e 	bl	8003e9a <memmove>
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	1b9b      	subs	r3, r3, r6
 8003962:	60a3      	str	r3, [r4, #8]
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	441e      	add	r6, r3
 8003968:	6026      	str	r6, [r4, #0]
 800396a:	2000      	movs	r0, #0
 800396c:	e7dc      	b.n	8003928 <__ssputs_r+0x58>
 800396e:	462a      	mov	r2, r5
 8003970:	f000 fb54 	bl	800401c <_realloc_r>
 8003974:	4606      	mov	r6, r0
 8003976:	2800      	cmp	r0, #0
 8003978:	d1e2      	bne.n	8003940 <__ssputs_r+0x70>
 800397a:	6921      	ldr	r1, [r4, #16]
 800397c:	4650      	mov	r0, sl
 800397e:	f000 faa5 	bl	8003ecc <_free_r>
 8003982:	e7c8      	b.n	8003916 <__ssputs_r+0x46>

08003984 <_svfiprintf_r>:
 8003984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003988:	461d      	mov	r5, r3
 800398a:	898b      	ldrh	r3, [r1, #12]
 800398c:	061f      	lsls	r7, r3, #24
 800398e:	b09d      	sub	sp, #116	; 0x74
 8003990:	4680      	mov	r8, r0
 8003992:	460c      	mov	r4, r1
 8003994:	4616      	mov	r6, r2
 8003996:	d50f      	bpl.n	80039b8 <_svfiprintf_r+0x34>
 8003998:	690b      	ldr	r3, [r1, #16]
 800399a:	b96b      	cbnz	r3, 80039b8 <_svfiprintf_r+0x34>
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	f000 fae3 	bl	8003f68 <_malloc_r>
 80039a2:	6020      	str	r0, [r4, #0]
 80039a4:	6120      	str	r0, [r4, #16]
 80039a6:	b928      	cbnz	r0, 80039b4 <_svfiprintf_r+0x30>
 80039a8:	230c      	movs	r3, #12
 80039aa:	f8c8 3000 	str.w	r3, [r8]
 80039ae:	f04f 30ff 	mov.w	r0, #4294967295
 80039b2:	e0c8      	b.n	8003b46 <_svfiprintf_r+0x1c2>
 80039b4:	2340      	movs	r3, #64	; 0x40
 80039b6:	6163      	str	r3, [r4, #20]
 80039b8:	2300      	movs	r3, #0
 80039ba:	9309      	str	r3, [sp, #36]	; 0x24
 80039bc:	2320      	movs	r3, #32
 80039be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039c2:	2330      	movs	r3, #48	; 0x30
 80039c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039c8:	9503      	str	r5, [sp, #12]
 80039ca:	f04f 0b01 	mov.w	fp, #1
 80039ce:	4637      	mov	r7, r6
 80039d0:	463d      	mov	r5, r7
 80039d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039d6:	b10b      	cbz	r3, 80039dc <_svfiprintf_r+0x58>
 80039d8:	2b25      	cmp	r3, #37	; 0x25
 80039da:	d13e      	bne.n	8003a5a <_svfiprintf_r+0xd6>
 80039dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80039e0:	d00b      	beq.n	80039fa <_svfiprintf_r+0x76>
 80039e2:	4653      	mov	r3, sl
 80039e4:	4632      	mov	r2, r6
 80039e6:	4621      	mov	r1, r4
 80039e8:	4640      	mov	r0, r8
 80039ea:	f7ff ff71 	bl	80038d0 <__ssputs_r>
 80039ee:	3001      	adds	r0, #1
 80039f0:	f000 80a4 	beq.w	8003b3c <_svfiprintf_r+0x1b8>
 80039f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f6:	4453      	add	r3, sl
 80039f8:	9309      	str	r3, [sp, #36]	; 0x24
 80039fa:	783b      	ldrb	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 809d 	beq.w	8003b3c <_svfiprintf_r+0x1b8>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a0c:	9304      	str	r3, [sp, #16]
 8003a0e:	9307      	str	r3, [sp, #28]
 8003a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a14:	931a      	str	r3, [sp, #104]	; 0x68
 8003a16:	462f      	mov	r7, r5
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a1e:	4850      	ldr	r0, [pc, #320]	; (8003b60 <_svfiprintf_r+0x1dc>)
 8003a20:	f7fc fbf6 	bl	8000210 <memchr>
 8003a24:	9b04      	ldr	r3, [sp, #16]
 8003a26:	b9d0      	cbnz	r0, 8003a5e <_svfiprintf_r+0xda>
 8003a28:	06d9      	lsls	r1, r3, #27
 8003a2a:	bf44      	itt	mi
 8003a2c:	2220      	movmi	r2, #32
 8003a2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a32:	071a      	lsls	r2, r3, #28
 8003a34:	bf44      	itt	mi
 8003a36:	222b      	movmi	r2, #43	; 0x2b
 8003a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a3c:	782a      	ldrb	r2, [r5, #0]
 8003a3e:	2a2a      	cmp	r2, #42	; 0x2a
 8003a40:	d015      	beq.n	8003a6e <_svfiprintf_r+0xea>
 8003a42:	9a07      	ldr	r2, [sp, #28]
 8003a44:	462f      	mov	r7, r5
 8003a46:	2000      	movs	r0, #0
 8003a48:	250a      	movs	r5, #10
 8003a4a:	4639      	mov	r1, r7
 8003a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a50:	3b30      	subs	r3, #48	; 0x30
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	d94d      	bls.n	8003af2 <_svfiprintf_r+0x16e>
 8003a56:	b1b8      	cbz	r0, 8003a88 <_svfiprintf_r+0x104>
 8003a58:	e00f      	b.n	8003a7a <_svfiprintf_r+0xf6>
 8003a5a:	462f      	mov	r7, r5
 8003a5c:	e7b8      	b.n	80039d0 <_svfiprintf_r+0x4c>
 8003a5e:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <_svfiprintf_r+0x1dc>)
 8003a60:	1a80      	subs	r0, r0, r2
 8003a62:	fa0b f000 	lsl.w	r0, fp, r0
 8003a66:	4318      	orrs	r0, r3
 8003a68:	9004      	str	r0, [sp, #16]
 8003a6a:	463d      	mov	r5, r7
 8003a6c:	e7d3      	b.n	8003a16 <_svfiprintf_r+0x92>
 8003a6e:	9a03      	ldr	r2, [sp, #12]
 8003a70:	1d11      	adds	r1, r2, #4
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	9103      	str	r1, [sp, #12]
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	db01      	blt.n	8003a7e <_svfiprintf_r+0xfa>
 8003a7a:	9207      	str	r2, [sp, #28]
 8003a7c:	e004      	b.n	8003a88 <_svfiprintf_r+0x104>
 8003a7e:	4252      	negs	r2, r2
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	9207      	str	r2, [sp, #28]
 8003a86:	9304      	str	r3, [sp, #16]
 8003a88:	783b      	ldrb	r3, [r7, #0]
 8003a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8c:	d10c      	bne.n	8003aa8 <_svfiprintf_r+0x124>
 8003a8e:	787b      	ldrb	r3, [r7, #1]
 8003a90:	2b2a      	cmp	r3, #42	; 0x2a
 8003a92:	d133      	bne.n	8003afc <_svfiprintf_r+0x178>
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	1d1a      	adds	r2, r3, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	9203      	str	r2, [sp, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bfb8      	it	lt
 8003aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aa4:	3702      	adds	r7, #2
 8003aa6:	9305      	str	r3, [sp, #20]
 8003aa8:	4d2e      	ldr	r5, [pc, #184]	; (8003b64 <_svfiprintf_r+0x1e0>)
 8003aaa:	7839      	ldrb	r1, [r7, #0]
 8003aac:	2203      	movs	r2, #3
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f7fc fbae 	bl	8000210 <memchr>
 8003ab4:	b138      	cbz	r0, 8003ac6 <_svfiprintf_r+0x142>
 8003ab6:	2340      	movs	r3, #64	; 0x40
 8003ab8:	1b40      	subs	r0, r0, r5
 8003aba:	fa03 f000 	lsl.w	r0, r3, r0
 8003abe:	9b04      	ldr	r3, [sp, #16]
 8003ac0:	4303      	orrs	r3, r0
 8003ac2:	3701      	adds	r7, #1
 8003ac4:	9304      	str	r3, [sp, #16]
 8003ac6:	7839      	ldrb	r1, [r7, #0]
 8003ac8:	4827      	ldr	r0, [pc, #156]	; (8003b68 <_svfiprintf_r+0x1e4>)
 8003aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ace:	2206      	movs	r2, #6
 8003ad0:	1c7e      	adds	r6, r7, #1
 8003ad2:	f7fc fb9d 	bl	8000210 <memchr>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d038      	beq.n	8003b4c <_svfiprintf_r+0x1c8>
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <_svfiprintf_r+0x1e8>)
 8003adc:	bb13      	cbnz	r3, 8003b24 <_svfiprintf_r+0x1a0>
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	3307      	adds	r3, #7
 8003ae2:	f023 0307 	bic.w	r3, r3, #7
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	9303      	str	r3, [sp, #12]
 8003aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aec:	444b      	add	r3, r9
 8003aee:	9309      	str	r3, [sp, #36]	; 0x24
 8003af0:	e76d      	b.n	80039ce <_svfiprintf_r+0x4a>
 8003af2:	fb05 3202 	mla	r2, r5, r2, r3
 8003af6:	2001      	movs	r0, #1
 8003af8:	460f      	mov	r7, r1
 8003afa:	e7a6      	b.n	8003a4a <_svfiprintf_r+0xc6>
 8003afc:	2300      	movs	r3, #0
 8003afe:	3701      	adds	r7, #1
 8003b00:	9305      	str	r3, [sp, #20]
 8003b02:	4619      	mov	r1, r3
 8003b04:	250a      	movs	r5, #10
 8003b06:	4638      	mov	r0, r7
 8003b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b0c:	3a30      	subs	r2, #48	; 0x30
 8003b0e:	2a09      	cmp	r2, #9
 8003b10:	d903      	bls.n	8003b1a <_svfiprintf_r+0x196>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0c8      	beq.n	8003aa8 <_svfiprintf_r+0x124>
 8003b16:	9105      	str	r1, [sp, #20]
 8003b18:	e7c6      	b.n	8003aa8 <_svfiprintf_r+0x124>
 8003b1a:	fb05 2101 	mla	r1, r5, r1, r2
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4607      	mov	r7, r0
 8003b22:	e7f0      	b.n	8003b06 <_svfiprintf_r+0x182>
 8003b24:	ab03      	add	r3, sp, #12
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <_svfiprintf_r+0x1ec>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	4640      	mov	r0, r8
 8003b30:	f3af 8000 	nop.w
 8003b34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b38:	4681      	mov	r9, r0
 8003b3a:	d1d6      	bne.n	8003aea <_svfiprintf_r+0x166>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	065b      	lsls	r3, r3, #25
 8003b40:	f53f af35 	bmi.w	80039ae <_svfiprintf_r+0x2a>
 8003b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b46:	b01d      	add	sp, #116	; 0x74
 8003b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b4c:	ab03      	add	r3, sp, #12
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	4622      	mov	r2, r4
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <_svfiprintf_r+0x1ec>)
 8003b54:	a904      	add	r1, sp, #16
 8003b56:	4640      	mov	r0, r8
 8003b58:	f000 f882 	bl	8003c60 <_printf_i>
 8003b5c:	e7ea      	b.n	8003b34 <_svfiprintf_r+0x1b0>
 8003b5e:	bf00      	nop
 8003b60:	080040dc 	.word	0x080040dc
 8003b64:	080040e2 	.word	0x080040e2
 8003b68:	080040e6 	.word	0x080040e6
 8003b6c:	00000000 	.word	0x00000000
 8003b70:	080038d1 	.word	0x080038d1

08003b74 <_printf_common>:
 8003b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b78:	4691      	mov	r9, r2
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	688a      	ldr	r2, [r1, #8]
 8003b7e:	690b      	ldr	r3, [r1, #16]
 8003b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bfb8      	it	lt
 8003b88:	4613      	movlt	r3, r2
 8003b8a:	f8c9 3000 	str.w	r3, [r9]
 8003b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b92:	4606      	mov	r6, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	b112      	cbz	r2, 8003b9e <_printf_common+0x2a>
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f8c9 3000 	str.w	r3, [r9]
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	0699      	lsls	r1, r3, #26
 8003ba2:	bf42      	ittt	mi
 8003ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ba8:	3302      	addmi	r3, #2
 8003baa:	f8c9 3000 	strmi.w	r3, [r9]
 8003bae:	6825      	ldr	r5, [r4, #0]
 8003bb0:	f015 0506 	ands.w	r5, r5, #6
 8003bb4:	d107      	bne.n	8003bc6 <_printf_common+0x52>
 8003bb6:	f104 0a19 	add.w	sl, r4, #25
 8003bba:	68e3      	ldr	r3, [r4, #12]
 8003bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	42ab      	cmp	r3, r5
 8003bc4:	dc28      	bgt.n	8003c18 <_printf_common+0xa4>
 8003bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	3300      	adds	r3, #0
 8003bce:	bf18      	it	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	0692      	lsls	r2, r2, #26
 8003bd4:	d42d      	bmi.n	8003c32 <_printf_common+0xbe>
 8003bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bda:	4639      	mov	r1, r7
 8003bdc:	4630      	mov	r0, r6
 8003bde:	47c0      	blx	r8
 8003be0:	3001      	adds	r0, #1
 8003be2:	d020      	beq.n	8003c26 <_printf_common+0xb2>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	68e5      	ldr	r5, [r4, #12]
 8003be8:	f8d9 2000 	ldr.w	r2, [r9]
 8003bec:	f003 0306 	and.w	r3, r3, #6
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	bf08      	it	eq
 8003bf4:	1aad      	subeq	r5, r5, r2
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	6922      	ldr	r2, [r4, #16]
 8003bfa:	bf0c      	ite	eq
 8003bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c00:	2500      	movne	r5, #0
 8003c02:	4293      	cmp	r3, r2
 8003c04:	bfc4      	itt	gt
 8003c06:	1a9b      	subgt	r3, r3, r2
 8003c08:	18ed      	addgt	r5, r5, r3
 8003c0a:	f04f 0900 	mov.w	r9, #0
 8003c0e:	341a      	adds	r4, #26
 8003c10:	454d      	cmp	r5, r9
 8003c12:	d11a      	bne.n	8003c4a <_printf_common+0xd6>
 8003c14:	2000      	movs	r0, #0
 8003c16:	e008      	b.n	8003c2a <_printf_common+0xb6>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4652      	mov	r2, sl
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	4630      	mov	r0, r6
 8003c20:	47c0      	blx	r8
 8003c22:	3001      	adds	r0, #1
 8003c24:	d103      	bne.n	8003c2e <_printf_common+0xba>
 8003c26:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2e:	3501      	adds	r5, #1
 8003c30:	e7c3      	b.n	8003bba <_printf_common+0x46>
 8003c32:	18e1      	adds	r1, r4, r3
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	2030      	movs	r0, #48	; 0x30
 8003c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c3c:	4422      	add	r2, r4
 8003c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c46:	3302      	adds	r3, #2
 8003c48:	e7c5      	b.n	8003bd6 <_printf_common+0x62>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	4639      	mov	r1, r7
 8003c50:	4630      	mov	r0, r6
 8003c52:	47c0      	blx	r8
 8003c54:	3001      	adds	r0, #1
 8003c56:	d0e6      	beq.n	8003c26 <_printf_common+0xb2>
 8003c58:	f109 0901 	add.w	r9, r9, #1
 8003c5c:	e7d8      	b.n	8003c10 <_printf_common+0x9c>
	...

08003c60 <_printf_i>:
 8003c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c68:	460c      	mov	r4, r1
 8003c6a:	7e09      	ldrb	r1, [r1, #24]
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	296e      	cmp	r1, #110	; 0x6e
 8003c70:	4617      	mov	r7, r2
 8003c72:	4606      	mov	r6, r0
 8003c74:	4698      	mov	r8, r3
 8003c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c78:	f000 80b3 	beq.w	8003de2 <_printf_i+0x182>
 8003c7c:	d822      	bhi.n	8003cc4 <_printf_i+0x64>
 8003c7e:	2963      	cmp	r1, #99	; 0x63
 8003c80:	d036      	beq.n	8003cf0 <_printf_i+0x90>
 8003c82:	d80a      	bhi.n	8003c9a <_printf_i+0x3a>
 8003c84:	2900      	cmp	r1, #0
 8003c86:	f000 80b9 	beq.w	8003dfc <_printf_i+0x19c>
 8003c8a:	2958      	cmp	r1, #88	; 0x58
 8003c8c:	f000 8083 	beq.w	8003d96 <_printf_i+0x136>
 8003c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c98:	e032      	b.n	8003d00 <_printf_i+0xa0>
 8003c9a:	2964      	cmp	r1, #100	; 0x64
 8003c9c:	d001      	beq.n	8003ca2 <_printf_i+0x42>
 8003c9e:	2969      	cmp	r1, #105	; 0x69
 8003ca0:	d1f6      	bne.n	8003c90 <_printf_i+0x30>
 8003ca2:	6820      	ldr	r0, [r4, #0]
 8003ca4:	6813      	ldr	r3, [r2, #0]
 8003ca6:	0605      	lsls	r5, r0, #24
 8003ca8:	f103 0104 	add.w	r1, r3, #4
 8003cac:	d52a      	bpl.n	8003d04 <_printf_i+0xa4>
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6011      	str	r1, [r2, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da03      	bge.n	8003cbe <_printf_i+0x5e>
 8003cb6:	222d      	movs	r2, #45	; 0x2d
 8003cb8:	425b      	negs	r3, r3
 8003cba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cbe:	486f      	ldr	r0, [pc, #444]	; (8003e7c <_printf_i+0x21c>)
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	e039      	b.n	8003d38 <_printf_i+0xd8>
 8003cc4:	2973      	cmp	r1, #115	; 0x73
 8003cc6:	f000 809d 	beq.w	8003e04 <_printf_i+0x1a4>
 8003cca:	d808      	bhi.n	8003cde <_printf_i+0x7e>
 8003ccc:	296f      	cmp	r1, #111	; 0x6f
 8003cce:	d020      	beq.n	8003d12 <_printf_i+0xb2>
 8003cd0:	2970      	cmp	r1, #112	; 0x70
 8003cd2:	d1dd      	bne.n	8003c90 <_printf_i+0x30>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	f043 0320 	orr.w	r3, r3, #32
 8003cda:	6023      	str	r3, [r4, #0]
 8003cdc:	e003      	b.n	8003ce6 <_printf_i+0x86>
 8003cde:	2975      	cmp	r1, #117	; 0x75
 8003ce0:	d017      	beq.n	8003d12 <_printf_i+0xb2>
 8003ce2:	2978      	cmp	r1, #120	; 0x78
 8003ce4:	d1d4      	bne.n	8003c90 <_printf_i+0x30>
 8003ce6:	2378      	movs	r3, #120	; 0x78
 8003ce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cec:	4864      	ldr	r0, [pc, #400]	; (8003e80 <_printf_i+0x220>)
 8003cee:	e055      	b.n	8003d9c <_printf_i+0x13c>
 8003cf0:	6813      	ldr	r3, [r2, #0]
 8003cf2:	1d19      	adds	r1, r3, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6011      	str	r1, [r2, #0]
 8003cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d00:	2301      	movs	r3, #1
 8003d02:	e08c      	b.n	8003e1e <_printf_i+0x1be>
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6011      	str	r1, [r2, #0]
 8003d08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d0c:	bf18      	it	ne
 8003d0e:	b21b      	sxthne	r3, r3
 8003d10:	e7cf      	b.n	8003cb2 <_printf_i+0x52>
 8003d12:	6813      	ldr	r3, [r2, #0]
 8003d14:	6825      	ldr	r5, [r4, #0]
 8003d16:	1d18      	adds	r0, r3, #4
 8003d18:	6010      	str	r0, [r2, #0]
 8003d1a:	0628      	lsls	r0, r5, #24
 8003d1c:	d501      	bpl.n	8003d22 <_printf_i+0xc2>
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	e002      	b.n	8003d28 <_printf_i+0xc8>
 8003d22:	0668      	lsls	r0, r5, #25
 8003d24:	d5fb      	bpl.n	8003d1e <_printf_i+0xbe>
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	4854      	ldr	r0, [pc, #336]	; (8003e7c <_printf_i+0x21c>)
 8003d2a:	296f      	cmp	r1, #111	; 0x6f
 8003d2c:	bf14      	ite	ne
 8003d2e:	220a      	movne	r2, #10
 8003d30:	2208      	moveq	r2, #8
 8003d32:	2100      	movs	r1, #0
 8003d34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d38:	6865      	ldr	r5, [r4, #4]
 8003d3a:	60a5      	str	r5, [r4, #8]
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	f2c0 8095 	blt.w	8003e6c <_printf_i+0x20c>
 8003d42:	6821      	ldr	r1, [r4, #0]
 8003d44:	f021 0104 	bic.w	r1, r1, #4
 8003d48:	6021      	str	r1, [r4, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d13d      	bne.n	8003dca <_printf_i+0x16a>
 8003d4e:	2d00      	cmp	r5, #0
 8003d50:	f040 808e 	bne.w	8003e70 <_printf_i+0x210>
 8003d54:	4665      	mov	r5, ip
 8003d56:	2a08      	cmp	r2, #8
 8003d58:	d10b      	bne.n	8003d72 <_printf_i+0x112>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	07db      	lsls	r3, r3, #31
 8003d5e:	d508      	bpl.n	8003d72 <_printf_i+0x112>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	6862      	ldr	r2, [r4, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	bfde      	ittt	le
 8003d68:	2330      	movle	r3, #48	; 0x30
 8003d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d72:	ebac 0305 	sub.w	r3, ip, r5
 8003d76:	6123      	str	r3, [r4, #16]
 8003d78:	f8cd 8000 	str.w	r8, [sp]
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	aa03      	add	r2, sp, #12
 8003d80:	4621      	mov	r1, r4
 8003d82:	4630      	mov	r0, r6
 8003d84:	f7ff fef6 	bl	8003b74 <_printf_common>
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d14d      	bne.n	8003e28 <_printf_i+0x1c8>
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	b005      	add	sp, #20
 8003d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d96:	4839      	ldr	r0, [pc, #228]	; (8003e7c <_printf_i+0x21c>)
 8003d98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d9c:	6813      	ldr	r3, [r2, #0]
 8003d9e:	6821      	ldr	r1, [r4, #0]
 8003da0:	1d1d      	adds	r5, r3, #4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6015      	str	r5, [r2, #0]
 8003da6:	060a      	lsls	r2, r1, #24
 8003da8:	d50b      	bpl.n	8003dc2 <_printf_i+0x162>
 8003daa:	07ca      	lsls	r2, r1, #31
 8003dac:	bf44      	itt	mi
 8003dae:	f041 0120 	orrmi.w	r1, r1, #32
 8003db2:	6021      	strmi	r1, [r4, #0]
 8003db4:	b91b      	cbnz	r3, 8003dbe <_printf_i+0x15e>
 8003db6:	6822      	ldr	r2, [r4, #0]
 8003db8:	f022 0220 	bic.w	r2, r2, #32
 8003dbc:	6022      	str	r2, [r4, #0]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	e7b7      	b.n	8003d32 <_printf_i+0xd2>
 8003dc2:	064d      	lsls	r5, r1, #25
 8003dc4:	bf48      	it	mi
 8003dc6:	b29b      	uxthmi	r3, r3
 8003dc8:	e7ef      	b.n	8003daa <_printf_i+0x14a>
 8003dca:	4665      	mov	r5, ip
 8003dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8003dd4:	5cc3      	ldrb	r3, [r0, r3]
 8003dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003dda:	460b      	mov	r3, r1
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	d1f5      	bne.n	8003dcc <_printf_i+0x16c>
 8003de0:	e7b9      	b.n	8003d56 <_printf_i+0xf6>
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	6825      	ldr	r5, [r4, #0]
 8003de6:	6961      	ldr	r1, [r4, #20]
 8003de8:	1d18      	adds	r0, r3, #4
 8003dea:	6010      	str	r0, [r2, #0]
 8003dec:	0628      	lsls	r0, r5, #24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	d501      	bpl.n	8003df6 <_printf_i+0x196>
 8003df2:	6019      	str	r1, [r3, #0]
 8003df4:	e002      	b.n	8003dfc <_printf_i+0x19c>
 8003df6:	066a      	lsls	r2, r5, #25
 8003df8:	d5fb      	bpl.n	8003df2 <_printf_i+0x192>
 8003dfa:	8019      	strh	r1, [r3, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	6123      	str	r3, [r4, #16]
 8003e00:	4665      	mov	r5, ip
 8003e02:	e7b9      	b.n	8003d78 <_printf_i+0x118>
 8003e04:	6813      	ldr	r3, [r2, #0]
 8003e06:	1d19      	adds	r1, r3, #4
 8003e08:	6011      	str	r1, [r2, #0]
 8003e0a:	681d      	ldr	r5, [r3, #0]
 8003e0c:	6862      	ldr	r2, [r4, #4]
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7fc f9fd 	bl	8000210 <memchr>
 8003e16:	b108      	cbz	r0, 8003e1c <_printf_i+0x1bc>
 8003e18:	1b40      	subs	r0, r0, r5
 8003e1a:	6060      	str	r0, [r4, #4]
 8003e1c:	6863      	ldr	r3, [r4, #4]
 8003e1e:	6123      	str	r3, [r4, #16]
 8003e20:	2300      	movs	r3, #0
 8003e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e26:	e7a7      	b.n	8003d78 <_printf_i+0x118>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	462a      	mov	r2, r5
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	4630      	mov	r0, r6
 8003e30:	47c0      	blx	r8
 8003e32:	3001      	adds	r0, #1
 8003e34:	d0aa      	beq.n	8003d8c <_printf_i+0x12c>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	079b      	lsls	r3, r3, #30
 8003e3a:	d413      	bmi.n	8003e64 <_printf_i+0x204>
 8003e3c:	68e0      	ldr	r0, [r4, #12]
 8003e3e:	9b03      	ldr	r3, [sp, #12]
 8003e40:	4298      	cmp	r0, r3
 8003e42:	bfb8      	it	lt
 8003e44:	4618      	movlt	r0, r3
 8003e46:	e7a3      	b.n	8003d90 <_printf_i+0x130>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	464a      	mov	r2, r9
 8003e4c:	4639      	mov	r1, r7
 8003e4e:	4630      	mov	r0, r6
 8003e50:	47c0      	blx	r8
 8003e52:	3001      	adds	r0, #1
 8003e54:	d09a      	beq.n	8003d8c <_printf_i+0x12c>
 8003e56:	3501      	adds	r5, #1
 8003e58:	68e3      	ldr	r3, [r4, #12]
 8003e5a:	9a03      	ldr	r2, [sp, #12]
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	42ab      	cmp	r3, r5
 8003e60:	dcf2      	bgt.n	8003e48 <_printf_i+0x1e8>
 8003e62:	e7eb      	b.n	8003e3c <_printf_i+0x1dc>
 8003e64:	2500      	movs	r5, #0
 8003e66:	f104 0919 	add.w	r9, r4, #25
 8003e6a:	e7f5      	b.n	8003e58 <_printf_i+0x1f8>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ac      	bne.n	8003dca <_printf_i+0x16a>
 8003e70:	7803      	ldrb	r3, [r0, #0]
 8003e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e7a:	e76c      	b.n	8003d56 <_printf_i+0xf6>
 8003e7c:	080040ed 	.word	0x080040ed
 8003e80:	080040fe 	.word	0x080040fe

08003e84 <memcpy>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	1e43      	subs	r3, r0, #1
 8003e88:	440a      	add	r2, r1
 8003e8a:	4291      	cmp	r1, r2
 8003e8c:	d100      	bne.n	8003e90 <memcpy+0xc>
 8003e8e:	bd10      	pop	{r4, pc}
 8003e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e98:	e7f7      	b.n	8003e8a <memcpy+0x6>

08003e9a <memmove>:
 8003e9a:	4288      	cmp	r0, r1
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	eb01 0302 	add.w	r3, r1, r2
 8003ea2:	d807      	bhi.n	8003eb4 <memmove+0x1a>
 8003ea4:	1e42      	subs	r2, r0, #1
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d00a      	beq.n	8003ec0 <memmove+0x26>
 8003eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eae:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003eb2:	e7f8      	b.n	8003ea6 <memmove+0xc>
 8003eb4:	4283      	cmp	r3, r0
 8003eb6:	d9f5      	bls.n	8003ea4 <memmove+0xa>
 8003eb8:	1881      	adds	r1, r0, r2
 8003eba:	1ad2      	subs	r2, r2, r3
 8003ebc:	42d3      	cmn	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memmove+0x28>
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ec6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003eca:	e7f7      	b.n	8003ebc <memmove+0x22>

08003ecc <_free_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4605      	mov	r5, r0
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	d045      	beq.n	8003f60 <_free_r+0x94>
 8003ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed8:	1f0c      	subs	r4, r1, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bfb8      	it	lt
 8003ede:	18e4      	addlt	r4, r4, r3
 8003ee0:	f000 f8d2 	bl	8004088 <__malloc_lock>
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <_free_r+0x98>)
 8003ee6:	6813      	ldr	r3, [r2, #0]
 8003ee8:	4610      	mov	r0, r2
 8003eea:	b933      	cbnz	r3, 8003efa <_free_r+0x2e>
 8003eec:	6063      	str	r3, [r4, #4]
 8003eee:	6014      	str	r4, [r2, #0]
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ef6:	f000 b8c8 	b.w	800408a <__malloc_unlock>
 8003efa:	42a3      	cmp	r3, r4
 8003efc:	d90c      	bls.n	8003f18 <_free_r+0x4c>
 8003efe:	6821      	ldr	r1, [r4, #0]
 8003f00:	1862      	adds	r2, r4, r1
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bf04      	itt	eq
 8003f06:	681a      	ldreq	r2, [r3, #0]
 8003f08:	685b      	ldreq	r3, [r3, #4]
 8003f0a:	6063      	str	r3, [r4, #4]
 8003f0c:	bf04      	itt	eq
 8003f0e:	1852      	addeq	r2, r2, r1
 8003f10:	6022      	streq	r2, [r4, #0]
 8003f12:	6004      	str	r4, [r0, #0]
 8003f14:	e7ec      	b.n	8003ef0 <_free_r+0x24>
 8003f16:	4613      	mov	r3, r2
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	b10a      	cbz	r2, 8003f20 <_free_r+0x54>
 8003f1c:	42a2      	cmp	r2, r4
 8003f1e:	d9fa      	bls.n	8003f16 <_free_r+0x4a>
 8003f20:	6819      	ldr	r1, [r3, #0]
 8003f22:	1858      	adds	r0, r3, r1
 8003f24:	42a0      	cmp	r0, r4
 8003f26:	d10b      	bne.n	8003f40 <_free_r+0x74>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	1858      	adds	r0, r3, r1
 8003f2e:	4282      	cmp	r2, r0
 8003f30:	6019      	str	r1, [r3, #0]
 8003f32:	d1dd      	bne.n	8003ef0 <_free_r+0x24>
 8003f34:	6810      	ldr	r0, [r2, #0]
 8003f36:	6852      	ldr	r2, [r2, #4]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	4401      	add	r1, r0
 8003f3c:	6019      	str	r1, [r3, #0]
 8003f3e:	e7d7      	b.n	8003ef0 <_free_r+0x24>
 8003f40:	d902      	bls.n	8003f48 <_free_r+0x7c>
 8003f42:	230c      	movs	r3, #12
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	e7d3      	b.n	8003ef0 <_free_r+0x24>
 8003f48:	6820      	ldr	r0, [r4, #0]
 8003f4a:	1821      	adds	r1, r4, r0
 8003f4c:	428a      	cmp	r2, r1
 8003f4e:	bf04      	itt	eq
 8003f50:	6811      	ldreq	r1, [r2, #0]
 8003f52:	6852      	ldreq	r2, [r2, #4]
 8003f54:	6062      	str	r2, [r4, #4]
 8003f56:	bf04      	itt	eq
 8003f58:	1809      	addeq	r1, r1, r0
 8003f5a:	6021      	streq	r1, [r4, #0]
 8003f5c:	605c      	str	r4, [r3, #4]
 8003f5e:	e7c7      	b.n	8003ef0 <_free_r+0x24>
 8003f60:	bd38      	pop	{r3, r4, r5, pc}
 8003f62:	bf00      	nop
 8003f64:	20000090 	.word	0x20000090

08003f68 <_malloc_r>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	1ccd      	adds	r5, r1, #3
 8003f6c:	f025 0503 	bic.w	r5, r5, #3
 8003f70:	3508      	adds	r5, #8
 8003f72:	2d0c      	cmp	r5, #12
 8003f74:	bf38      	it	cc
 8003f76:	250c      	movcc	r5, #12
 8003f78:	2d00      	cmp	r5, #0
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	db01      	blt.n	8003f82 <_malloc_r+0x1a>
 8003f7e:	42a9      	cmp	r1, r5
 8003f80:	d903      	bls.n	8003f8a <_malloc_r+0x22>
 8003f82:	230c      	movs	r3, #12
 8003f84:	6033      	str	r3, [r6, #0]
 8003f86:	2000      	movs	r0, #0
 8003f88:	bd70      	pop	{r4, r5, r6, pc}
 8003f8a:	f000 f87d 	bl	8004088 <__malloc_lock>
 8003f8e:	4a21      	ldr	r2, [pc, #132]	; (8004014 <_malloc_r+0xac>)
 8003f90:	6814      	ldr	r4, [r2, #0]
 8003f92:	4621      	mov	r1, r4
 8003f94:	b991      	cbnz	r1, 8003fbc <_malloc_r+0x54>
 8003f96:	4c20      	ldr	r4, [pc, #128]	; (8004018 <_malloc_r+0xb0>)
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	b91b      	cbnz	r3, 8003fa4 <_malloc_r+0x3c>
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f000 f863 	bl	8004068 <_sbrk_r>
 8003fa2:	6020      	str	r0, [r4, #0]
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f000 f85e 	bl	8004068 <_sbrk_r>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d124      	bne.n	8003ffa <_malloc_r+0x92>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	6033      	str	r3, [r6, #0]
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	f000 f868 	bl	800408a <__malloc_unlock>
 8003fba:	e7e4      	b.n	8003f86 <_malloc_r+0x1e>
 8003fbc:	680b      	ldr	r3, [r1, #0]
 8003fbe:	1b5b      	subs	r3, r3, r5
 8003fc0:	d418      	bmi.n	8003ff4 <_malloc_r+0x8c>
 8003fc2:	2b0b      	cmp	r3, #11
 8003fc4:	d90f      	bls.n	8003fe6 <_malloc_r+0x7e>
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	50cd      	str	r5, [r1, r3]
 8003fca:	18cc      	adds	r4, r1, r3
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f000 f85c 	bl	800408a <__malloc_unlock>
 8003fd2:	f104 000b 	add.w	r0, r4, #11
 8003fd6:	1d23      	adds	r3, r4, #4
 8003fd8:	f020 0007 	bic.w	r0, r0, #7
 8003fdc:	1ac3      	subs	r3, r0, r3
 8003fde:	d0d3      	beq.n	8003f88 <_malloc_r+0x20>
 8003fe0:	425a      	negs	r2, r3
 8003fe2:	50e2      	str	r2, [r4, r3]
 8003fe4:	e7d0      	b.n	8003f88 <_malloc_r+0x20>
 8003fe6:	428c      	cmp	r4, r1
 8003fe8:	684b      	ldr	r3, [r1, #4]
 8003fea:	bf16      	itet	ne
 8003fec:	6063      	strne	r3, [r4, #4]
 8003fee:	6013      	streq	r3, [r2, #0]
 8003ff0:	460c      	movne	r4, r1
 8003ff2:	e7eb      	b.n	8003fcc <_malloc_r+0x64>
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	6849      	ldr	r1, [r1, #4]
 8003ff8:	e7cc      	b.n	8003f94 <_malloc_r+0x2c>
 8003ffa:	1cc4      	adds	r4, r0, #3
 8003ffc:	f024 0403 	bic.w	r4, r4, #3
 8004000:	42a0      	cmp	r0, r4
 8004002:	d005      	beq.n	8004010 <_malloc_r+0xa8>
 8004004:	1a21      	subs	r1, r4, r0
 8004006:	4630      	mov	r0, r6
 8004008:	f000 f82e 	bl	8004068 <_sbrk_r>
 800400c:	3001      	adds	r0, #1
 800400e:	d0cf      	beq.n	8003fb0 <_malloc_r+0x48>
 8004010:	6025      	str	r5, [r4, #0]
 8004012:	e7db      	b.n	8003fcc <_malloc_r+0x64>
 8004014:	20000090 	.word	0x20000090
 8004018:	20000094 	.word	0x20000094

0800401c <_realloc_r>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	4607      	mov	r7, r0
 8004020:	4614      	mov	r4, r2
 8004022:	460e      	mov	r6, r1
 8004024:	b921      	cbnz	r1, 8004030 <_realloc_r+0x14>
 8004026:	4611      	mov	r1, r2
 8004028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800402c:	f7ff bf9c 	b.w	8003f68 <_malloc_r>
 8004030:	b922      	cbnz	r2, 800403c <_realloc_r+0x20>
 8004032:	f7ff ff4b 	bl	8003ecc <_free_r>
 8004036:	4625      	mov	r5, r4
 8004038:	4628      	mov	r0, r5
 800403a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800403c:	f000 f826 	bl	800408c <_malloc_usable_size_r>
 8004040:	42a0      	cmp	r0, r4
 8004042:	d20f      	bcs.n	8004064 <_realloc_r+0x48>
 8004044:	4621      	mov	r1, r4
 8004046:	4638      	mov	r0, r7
 8004048:	f7ff ff8e 	bl	8003f68 <_malloc_r>
 800404c:	4605      	mov	r5, r0
 800404e:	2800      	cmp	r0, #0
 8004050:	d0f2      	beq.n	8004038 <_realloc_r+0x1c>
 8004052:	4631      	mov	r1, r6
 8004054:	4622      	mov	r2, r4
 8004056:	f7ff ff15 	bl	8003e84 <memcpy>
 800405a:	4631      	mov	r1, r6
 800405c:	4638      	mov	r0, r7
 800405e:	f7ff ff35 	bl	8003ecc <_free_r>
 8004062:	e7e9      	b.n	8004038 <_realloc_r+0x1c>
 8004064:	4635      	mov	r5, r6
 8004066:	e7e7      	b.n	8004038 <_realloc_r+0x1c>

08004068 <_sbrk_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4c06      	ldr	r4, [pc, #24]	; (8004084 <_sbrk_r+0x1c>)
 800406c:	2300      	movs	r3, #0
 800406e:	4605      	mov	r5, r0
 8004070:	4608      	mov	r0, r1
 8004072:	6023      	str	r3, [r4, #0]
 8004074:	f7fc fe52 	bl	8000d1c <_sbrk>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_sbrk_r+0x1a>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	b103      	cbz	r3, 8004082 <_sbrk_r+0x1a>
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	20000128 	.word	0x20000128

08004088 <__malloc_lock>:
 8004088:	4770      	bx	lr

0800408a <__malloc_unlock>:
 800408a:	4770      	bx	lr

0800408c <_malloc_usable_size_r>:
 800408c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004090:	1f18      	subs	r0, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	bfbc      	itt	lt
 8004096:	580b      	ldrlt	r3, [r1, r0]
 8004098:	18c0      	addlt	r0, r0, r3
 800409a:	4770      	bx	lr

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
